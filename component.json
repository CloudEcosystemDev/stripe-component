{
    "title": "Stripe API",
    "description": "The Stripe REST API. Please see https://stripe.com/docs/api for more details.",
    "docsUrl": "",
    "url": "https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://api.stripe.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_username": {
                "label": "Username (basicAuth)",
                "viewClass": "TextFieldView",
                "note": "Basic HTTP authentication. Allowed headers-- Authorization: Basic <api_key> | Authorization: Basic <base64 hash of `api_key:`>"
            },
            "auth_password": {
                "label": "Password (basicAuth)",
                "viewClass": "TextFieldView",
                "note": "Basic HTTP authentication. Allowed headers-- Authorization: Basic <api_key> | Authorization: Basic <base64 hash of `api_key:`>"
            },
            "auth_bearerAuth": {
                "label": "bearerAuth (auth-scheme)",
                "viewClass": "TextFieldView",
                "note": "Bearer HTTP authentication. Allowed headers-- Authorization: Bearer <api_key>"
            }
        }
    },
    "triggers": {
        "lookup": {
            "main": "./lib/lookups/lookup.js",
            "title": "Function to run a lookup",
            "description": "Function to call an internal trigger or action"
        },
        "GetAccountCapabilities": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountCapabilities",
            "description": "Returns a list of capabilities associated with the account. The capabilities are\nreturned sorted by creation date, with the most recent capability appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/account/capabilities",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountCapabilities.in.json",
                "out": "./lib/schemas/GetAccountCapabilities.out.json"
            }
        },
        "GetAccount": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccount",
            "description": "Retrieves the details of an account.",
            "callParams": {
                "pathName": "/v1/account",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccount.in.json",
                "out": "./lib/schemas/GetAccount.out.json"
            }
        },
        "GetAccountPeople": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountPeople",
            "description": "Returns a list of people associated with the account's legal entity. The people\nare returned sorted by creation date, with the most recent people appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/account/people",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountPeople.in.json",
                "out": "./lib/schemas/GetAccountPeople.out.json"
            }
        },
        "GetAccounts": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccounts",
            "description": "Returns a list of accounts connected to your platform via Connect\n[/docs/connect]. If you're not a platform, the list is empty.",
            "callParams": {
                "pathName": "/v1/accounts",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccounts.in.json",
                "out": "./lib/schemas/GetAccounts.out.json"
            }
        },
        "GetAccountPersons": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountPersons",
            "description": "Returns a list of people associated with the account's legal entity. The people\nare returned sorted by creation date, with the most recent people appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/account/persons",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountPersons.in.json",
                "out": "./lib/schemas/GetAccountPersons.out.json"
            }
        },
        "GetAccountsAccountExternalAccounts": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountsAccountExternalAccounts",
            "description": "List external accounts for an account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/external_accounts",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountExternalAccounts.in.json",
                "out": "./lib/schemas/GetAccountsAccountExternalAccounts.out.json"
            }
        },
        "GetAccountsAccountPeople": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountsAccountPeople",
            "description": "Returns a list of people associated with the account's legal entity. The people\nare returned sorted by creation date, with the most recent people appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/people",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountPeople.in.json",
                "out": "./lib/schemas/GetAccountsAccountPeople.out.json"
            }
        },
        "GetAccountExternalAccounts": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountExternalAccounts",
            "description": "List external accounts for an account.",
            "callParams": {
                "pathName": "/v1/account/external_accounts",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountExternalAccounts.in.json",
                "out": "./lib/schemas/GetAccountExternalAccounts.out.json"
            }
        },
        "GetApplicationFees": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetApplicationFees",
            "description": "Returns a list of application fees you've previously collected. The application\nfees are returned in sorted order, with the most recent fees appearing first.",
            "callParams": {
                "pathName": "/v1/application_fees",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetApplicationFees.in.json",
                "out": "./lib/schemas/GetApplicationFees.out.json"
            }
        },
        "GetApplicationFeesIdRefunds": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetApplicationFeesIdRefunds",
            "description": "You can see a list of the refunds belonging to a specific application fee. Note\nthat the 10 most recent refunds are always available by default on the\napplication fee object. If you need more than those 10, you can use this API\nmethod and the limit and starting_after parameters to page through additional\nrefunds.",
            "callParams": {
                "pathName": "/v1/application_fees/{id}/refunds",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetApplicationFeesIdRefunds.in.json",
                "out": "./lib/schemas/GetApplicationFeesIdRefunds.out.json"
            }
        },
        "GetAccountsAccountPersons": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountsAccountPersons",
            "description": "Returns a list of people associated with the account's legal entity. The people\nare returned sorted by creation date, with the most recent people appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/persons",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountPersons.in.json",
                "out": "./lib/schemas/GetAccountsAccountPersons.out.json"
            }
        },
        "GetBitcoinReceivers": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetBitcoinReceivers",
            "description": "Returns a list of your receivers. Receivers are returned sorted by creation\ndate, with the most recently created receivers appearing first.",
            "callParams": {
                "pathName": "/v1/bitcoin/receivers",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBitcoinReceivers.in.json",
                "out": "./lib/schemas/GetBitcoinReceivers.out.json"
            }
        },
        "GetBalance": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetBalance",
            "description": "Retrieves the current account balance, based on the authentication that was used\nto make the request. For a sample request, see Accounting for negative balances\n[/docs/connect/account-balances#accounting-for-negative-balances].",
            "callParams": {
                "pathName": "/v1/balance",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBalance.in.json",
                "out": "./lib/schemas/GetBalance.out.json"
            }
        },
        "GetBitcoinReceiversReceiverTransactions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetBitcoinReceiversReceiverTransactions",
            "description": "List bitcoin transacitons for a given receiver.",
            "callParams": {
                "pathName": "/v1/bitcoin/receivers/{receiver}/transactions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBitcoinReceiversReceiverTransactions.in.json",
                "out": "./lib/schemas/GetBitcoinReceiversReceiverTransactions.out.json"
            }
        },
        "GetBalanceHistory": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetBalanceHistory",
            "description": "Returns a list of transactions that have contributed to the Stripe account\nbalance (e.g., charges, transfers, and so forth). The transactions are returned\nin sorted order, with the most recent transactions appearing first.\n\nNote that this endpoint was previously called \"Balance history\" and used the\npath /v1/balance/history.",
            "callParams": {
                "pathName": "/v1/balance/history",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBalanceHistory.in.json",
                "out": "./lib/schemas/GetBalanceHistory.out.json"
            }
        },
        "GetApplePayDomains": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetApplePayDomains",
            "description": "List apple pay domains.",
            "callParams": {
                "pathName": "/v1/apple_pay/domains",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetApplePayDomains.in.json",
                "out": "./lib/schemas/GetApplePayDomains.out.json"
            }
        },
        "GetAccountsAccountCapabilities": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetAccountsAccountCapabilities",
            "description": "Returns a list of capabilities associated with the account. The capabilities are\nreturned sorted by creation date, with the most recent capability appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/capabilities",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountCapabilities.in.json",
                "out": "./lib/schemas/GetAccountsAccountCapabilities.out.json"
            }
        },
        "GetChargesChargeRefunds": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetChargesChargeRefunds",
            "description": "You can see a list of the refunds belonging to a specific charge. Note that the\n10 most recent refunds are always available by default on the charge object. If\nyou need more than those 10, you can use this API method and the limit and \nstarting_after parameters to page through additional refunds.",
            "callParams": {
                "pathName": "/v1/charges/{charge}/refunds",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetChargesChargeRefunds.in.json",
                "out": "./lib/schemas/GetChargesChargeRefunds.out.json"
            }
        },
        "GetCharges": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCharges",
            "description": "Returns a list of charges you've previously created. The charges are returned in\nsorted order, with the most recent charges appearing first.",
            "callParams": {
                "pathName": "/v1/charges",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCharges.in.json",
                "out": "./lib/schemas/GetCharges.out.json"
            }
        },
        "GetBitcoinTransactions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetBitcoinTransactions",
            "description": "List bitcoin transacitons for a given receiver.",
            "callParams": {
                "pathName": "/v1/bitcoin/transactions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBitcoinTransactions.in.json",
                "out": "./lib/schemas/GetBitcoinTransactions.out.json"
            }
        },
        "GetCheckoutSessions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCheckoutSessions",
            "description": "Returns a list of Checkout Sessions.",
            "callParams": {
                "pathName": "/v1/checkout/sessions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCheckoutSessions.in.json",
                "out": "./lib/schemas/GetCheckoutSessions.out.json"
            }
        },
        "GetCheckoutSessionsSessionLineItems": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCheckoutSessionsSessionLineItems",
            "description": "When retrieving a Checkout Session, there is an includable line_items property\ncontaining the first handful of those items. There is also a URL where you can\nretrieve the full (paginated) list of line items.",
            "callParams": {
                "pathName": "/v1/checkout/sessions/{session}/line_items",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCheckoutSessionsSessionLineItems.in.json",
                "out": "./lib/schemas/GetCheckoutSessionsSessionLineItems.out.json"
            }
        },
        "GetCoupons": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCoupons",
            "description": "Returns a list of your coupons.",
            "callParams": {
                "pathName": "/v1/coupons",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCoupons.in.json",
                "out": "./lib/schemas/GetCoupons.out.json"
            }
        },
        "GetCountrySpecs": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCountrySpecs",
            "description": "Lists all Country Spec objects available in the API.",
            "callParams": {
                "pathName": "/v1/country_specs",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCountrySpecs.in.json",
                "out": "./lib/schemas/GetCountrySpecs.out.json"
            }
        },
        "GetChargesSearch": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetChargesSearch",
            "description": "Search for charges you've previously created using Stripe's Search Query\nLanguage [/docs/search#search-query-language]. Don't use search in\nread-after-write flows where strict consistency is necessary. Under normal\noperating conditions, data is searchable in less than a minute. Occasionally,\npropagation of new or updated data can be up to an hour behind during outages.\nSearch functionality is not available to merchants in India.",
            "callParams": {
                "pathName": "/v1/charges/search",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetChargesSearch.in.json",
                "out": "./lib/schemas/GetChargesSearch.out.json"
            }
        },
        "GetCreditNotesPreview": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCreditNotesPreview",
            "description": "Get a preview of a credit note without creating it.",
            "callParams": {
                "pathName": "/v1/credit_notes/preview",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCreditNotesPreview.in.json",
                "out": "./lib/schemas/GetCreditNotesPreview.out.json"
            }
        },
        "GetCustomers": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomers",
            "description": "Returns a list of your customers. The customers are returned sorted by creation\ndate, with the most recent customers appearing first.",
            "callParams": {
                "pathName": "/v1/customers",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomers.in.json",
                "out": "./lib/schemas/GetCustomers.out.json"
            }
        },
        "GetCreditNotes": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCreditNotes",
            "description": "Returns a list of credit notes.",
            "callParams": {
                "pathName": "/v1/credit_notes",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCreditNotes.in.json",
                "out": "./lib/schemas/GetCreditNotes.out.json"
            }
        },
        "GetCreditNotesCreditNoteLines": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCreditNotesCreditNoteLines",
            "description": "When retrieving a credit note, you'll get a lines property containing the the\nfirst handful of those items. There is also a URL where you can retrieve the\nfull (paginated) list of line items.",
            "callParams": {
                "pathName": "/v1/credit_notes/{credit_note}/lines",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCreditNotesCreditNoteLines.in.json",
                "out": "./lib/schemas/GetCreditNotesCreditNoteLines.out.json"
            }
        },
        "GetCreditNotesPreviewLines": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCreditNotesPreviewLines",
            "description": "When retrieving a credit note preview, you'll get a lines property containing\nthe first handful of those items. This URL you can retrieve the full (paginated)\nlist of line items.",
            "callParams": {
                "pathName": "/v1/credit_notes/preview/lines",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCreditNotesPreviewLines.in.json",
                "out": "./lib/schemas/GetCreditNotesPreviewLines.out.json"
            }
        },
        "GetChargesChargeDispute": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetChargesChargeDispute",
            "description": "Retrieve a dispute for a specified charge.",
            "callParams": {
                "pathName": "/v1/charges/{charge}/dispute",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetChargesChargeDispute.in.json",
                "out": "./lib/schemas/GetChargesChargeDispute.out.json"
            }
        },
        "GetCustomersCustomerCards": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerCards",
            "description": "You can see a list of the cards belonging to a customer. Note that the 10 most\nrecent sources are always available on the Customer object. If you need more\nthan those 10, you can use this API method and the limit and starting_after \nparameters to page through additional cards.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/cards",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerCards.in.json",
                "out": "./lib/schemas/GetCustomersCustomerCards.out.json"
            }
        },
        "GetCustomersCustomerDiscount": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerDiscount",
            "description": "",
            "callParams": {
                "pathName": "/v1/customers/{customer}/discount",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerDiscount.in.json",
                "out": "./lib/schemas/GetCustomersCustomerDiscount.out.json"
            }
        },
        "GetCustomersCustomerPaymentMethods": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerPaymentMethods",
            "description": "Returns a list of PaymentMethods for a given Customer",
            "callParams": {
                "pathName": "/v1/customers/{customer}/payment_methods",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerPaymentMethods.in.json",
                "out": "./lib/schemas/GetCustomersCustomerPaymentMethods.out.json"
            }
        },
        "GetCustomersCustomerSources": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerSources",
            "description": "List sources for a specified customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/sources",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerSources.in.json",
                "out": "./lib/schemas/GetCustomersCustomerSources.out.json"
            }
        },
        "GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount",
            "description": "",
            "callParams": {
                "pathName": "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount.in.json",
                "out": "./lib/schemas/GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount.out.json"
            }
        },
        "GetCustomersCustomerTaxIds": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerTaxIds",
            "description": "Returns a list of tax IDs for a customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/tax_ids",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerTaxIds.in.json",
                "out": "./lib/schemas/GetCustomersCustomerTaxIds.out.json"
            }
        },
        "GetDisputes": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetDisputes",
            "description": "Returns a list of your disputes.",
            "callParams": {
                "pathName": "/v1/disputes",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetDisputes.in.json",
                "out": "./lib/schemas/GetDisputes.out.json"
            }
        },
        "GetEvents": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetEvents",
            "description": "List events, going back up to 30 days. Each event data is rendered according to\nStripe API version at its creation time, specified in event object\n[/docs/api/events/object] api_version attribute (not according to your current\nStripe API version or Stripe-Version header).",
            "callParams": {
                "pathName": "/v1/events",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetEvents.in.json",
                "out": "./lib/schemas/GetEvents.out.json"
            }
        },
        "GetFileLinks": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetFileLinks",
            "description": "Returns a list of file links.",
            "callParams": {
                "pathName": "/v1/file_links",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetFileLinks.in.json",
                "out": "./lib/schemas/GetFileLinks.out.json"
            }
        },
        "GetExchangeRates": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetExchangeRates",
            "description": "Returns a list of objects that contain the rates at which foreign currencies are\nconverted to one another. Only shows the currencies for which Stripe supports.",
            "callParams": {
                "pathName": "/v1/exchange_rates",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetExchangeRates.in.json",
                "out": "./lib/schemas/GetExchangeRates.out.json"
            }
        },
        "GetCustomersCustomerSubscriptions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerSubscriptions",
            "description": "You can see a list of the customer's active subscriptions. Note that the 10 most\nrecent active subscriptions are always available by default on the customer\nobject. If you need more than those 10, you can use the limit and starting_after\nparameters to page through additional subscriptions.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/subscriptions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerSubscriptions.in.json",
                "out": "./lib/schemas/GetCustomersCustomerSubscriptions.out.json"
            }
        },
        "GetFiles": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetFiles",
            "description": "Returns a list of the files that your account has access to. The files are\nreturned sorted by creation date, with the most recently created files appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/files",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetFiles.in.json",
                "out": "./lib/schemas/GetFiles.out.json"
            }
        },
        "GetIdentityVerificationReports": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIdentityVerificationReports",
            "description": "List all verification reports.",
            "callParams": {
                "pathName": "/v1/identity/verification_reports",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIdentityVerificationReports.in.json",
                "out": "./lib/schemas/GetIdentityVerificationReports.out.json"
            }
        },
        "GetIdentityVerificationSessions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIdentityVerificationSessions",
            "description": "Returns a list of VerificationSessions",
            "callParams": {
                "pathName": "/v1/identity/verification_sessions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIdentityVerificationSessions.in.json",
                "out": "./lib/schemas/GetIdentityVerificationSessions.out.json"
            }
        },
        "GetCustomersCustomerBalanceTransactions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerBalanceTransactions",
            "description": "Returns a list of transactions that updated the customer's balances\n[/docs/billing/customer/balance].",
            "callParams": {
                "pathName": "/v1/customers/{customer}/balance_transactions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerBalanceTransactions.in.json",
                "out": "./lib/schemas/GetCustomersCustomerBalanceTransactions.out.json"
            }
        },
        "GetInvoicesSearch": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetInvoicesSearch",
            "description": "Search for invoices you've previously created using Stripe's Search Query\nLanguage [/docs/search#search-query-language]. Don't use search in\nread-after-write flows where strict consistency is necessary. Under normal\noperating conditions, data is searchable in less than a minute. Occasionally,\npropagation of new or updated data can be up to an hour behind during outages.\nSearch functionality is not available to merchants in India.",
            "callParams": {
                "pathName": "/v1/invoices/search",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoicesSearch.in.json",
                "out": "./lib/schemas/GetInvoicesSearch.out.json"
            }
        },
        "GetBalanceTransactions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetBalanceTransactions",
            "description": "Returns a list of transactions that have contributed to the Stripe account\nbalance (e.g., charges, transfers, and so forth). The transactions are returned\nin sorted order, with the most recent transactions appearing first.\n\nNote that this endpoint was previously called \"Balance history\" and used the\npath /v1/balance/history.",
            "callParams": {
                "pathName": "/v1/balance_transactions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBalanceTransactions.in.json",
                "out": "./lib/schemas/GetBalanceTransactions.out.json"
            }
        },
        "GetInvoicesUpcomingLines": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetInvoicesUpcomingLines",
            "description": "When retrieving an upcoming invoice, you'll get a lines property containing the\ntotal count of line items and the first handful of those items. There is also a\nURL where you can retrieve the full (paginated) list of line items.",
            "callParams": {
                "pathName": "/v1/invoices/upcoming/lines",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoicesUpcomingLines.in.json",
                "out": "./lib/schemas/GetInvoicesUpcomingLines.out.json"
            }
        },
        "GetInvoices": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetInvoices",
            "description": "You can list all invoices, or list the invoices for a specific customer. The\ninvoices are returned sorted by creation date, with the most recently created\ninvoices appearing first.",
            "callParams": {
                "pathName": "/v1/invoices",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoices.in.json",
                "out": "./lib/schemas/GetInvoices.out.json"
            }
        },
        "GetInvoicesUpcoming": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetInvoicesUpcoming",
            "description": "At any time, you can preview the upcoming invoice for a customer. This will show\nyou all the charges that are pending, including subscription renewal charges,\ninvoice item charges, etc. It will also show you any discounts that are\napplicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a\npreview - the invoice has not yet been created. As such, the upcoming invoice\nwill not show up in invoice listing calls, and you cannot use the API to pay or\nedit the invoice. If you want to change the amount that your customer will be\nbilled, you can add, remove, or update pending invoice items, or update the\ncustomer's discount.\n\nYou can preview the effects of updating a subscription, including a preview of\nwhat proration will take place. To ensure that the actual proration is\ncalculated exactly the same as the previewed proration, you should pass a \nproration_date parameter when doing the actual subscription update. The value\npassed in should be the same as the subscription_proration_date returned on the\nupcoming invoice resource. The recommended way to get only the prorations being\npreviewed is to consider only proration line items where period[start] is equal\nto the subscription_proration_date on the upcoming invoice resource.",
            "callParams": {
                "pathName": "/v1/invoices/upcoming",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoicesUpcoming.in.json",
                "out": "./lib/schemas/GetInvoicesUpcoming.out.json"
            }
        },
        "GetInvoicesInvoiceLines": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetInvoicesInvoiceLines",
            "description": "When retrieving an invoice, you'll get a lines property containing the total\ncount of line items and the first handful of those items. There is also a URL\nwhere you can retrieve the full (paginated) list of line items.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}/lines",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoicesInvoiceLines.in.json",
                "out": "./lib/schemas/GetInvoicesInvoiceLines.out.json"
            }
        },
        "GetIssuerFraudRecords": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIssuerFraudRecords",
            "description": "Returns a list of issuer fraud records.",
            "callParams": {
                "pathName": "/v1/issuer_fraud_records",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuerFraudRecords.in.json",
                "out": "./lib/schemas/GetIssuerFraudRecords.out.json"
            }
        },
        "GetBillingPortalConfigurations": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetBillingPortalConfigurations",
            "description": "Returns a list of configurations that describe the functionality of the customer\nportal.",
            "callParams": {
                "pathName": "/v1/billing_portal/configurations",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBillingPortalConfigurations.in.json",
                "out": "./lib/schemas/GetBillingPortalConfigurations.out.json"
            }
        },
        "GetIssuingAuthorizations": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIssuingAuthorizations",
            "description": "Returns a list of Issuing Authorization objects. The objects are sorted in\ndescending order by creation date, with the most recently created object\nappearing first.",
            "callParams": {
                "pathName": "/v1/issuing/authorizations",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingAuthorizations.in.json",
                "out": "./lib/schemas/GetIssuingAuthorizations.out.json"
            }
        },
        "GetCustomersCustomerBankAccounts": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersCustomerBankAccounts",
            "description": "You can see a list of the bank accounts belonging to a Customer. Note that the\n10 most recent sources are always available by default on the Customer. If you\nneed more than those 10, you can use this API method and the limit and \nstarting_after parameters to page through additional bank accounts.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/bank_accounts",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerBankAccounts.in.json",
                "out": "./lib/schemas/GetCustomersCustomerBankAccounts.out.json"
            }
        },
        "GetIssuingCards": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIssuingCards",
            "description": "Returns a list of Issuing Card objects. The objects are sorted in descending\norder by creation date, with the most recently created object appearing first.",
            "callParams": {
                "pathName": "/v1/issuing/cards",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingCards.in.json",
                "out": "./lib/schemas/GetIssuingCards.out.json"
            }
        },
        "GetIssuingCardholders": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIssuingCardholders",
            "description": "Returns a list of Issuing Cardholder objects. The objects are sorted in\ndescending order by creation date, with the most recently created object\nappearing first.",
            "callParams": {
                "pathName": "/v1/issuing/cardholders",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingCardholders.in.json",
                "out": "./lib/schemas/GetIssuingCardholders.out.json"
            }
        },
        "GetIssuingDisputes": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIssuingDisputes",
            "description": "Returns a list of Issuing Dispute objects. The objects are sorted in descending\norder by creation date, with the most recently created object appearing first.",
            "callParams": {
                "pathName": "/v1/issuing/disputes",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingDisputes.in.json",
                "out": "./lib/schemas/GetIssuingDisputes.out.json"
            }
        },
        "GetCustomersSearch": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetCustomersSearch",
            "description": "Search for customers you've previously created using Stripe's Search Query\nLanguage [/docs/search#search-query-language]. Don't use search in\nread-after-write flows where strict consistency is necessary. Under normal\noperating conditions, data is searchable in less than a minute. Occasionally,\npropagation of new or updated data can be up to an hour behind during outages.\nSearch functionality is not available to merchants in India.",
            "callParams": {
                "pathName": "/v1/customers/search",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersSearch.in.json",
                "out": "./lib/schemas/GetCustomersSearch.out.json"
            }
        },
        "GetIssuingSettlements": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIssuingSettlements",
            "description": "Returns a list of Issuing Settlement objects. The objects are sorted in\ndescending order by creation date, with the most recently created object\nappearing first.",
            "callParams": {
                "pathName": "/v1/issuing/settlements",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingSettlements.in.json",
                "out": "./lib/schemas/GetIssuingSettlements.out.json"
            }
        },
        "GetIssuingTransactions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetIssuingTransactions",
            "description": "Returns a list of Issuing Transaction objects. The objects are sorted in\ndescending order by creation date, with the most recently created object\nappearing first.",
            "callParams": {
                "pathName": "/v1/issuing/transactions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingTransactions.in.json",
                "out": "./lib/schemas/GetIssuingTransactions.out.json"
            }
        },
        "GetOrderReturns": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetOrderReturns",
            "description": "Returns a list of your order returns. The returns are returned sorted by\ncreation date, with the most recently created return appearing first.",
            "callParams": {
                "pathName": "/v1/order_returns",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetOrderReturns.in.json",
                "out": "./lib/schemas/GetOrderReturns.out.json"
            }
        },
        "GetOrders": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetOrders",
            "description": "Returns a list of your orders. The orders are returned sorted by creation date,\nwith the most recently created orders appearing first.",
            "callParams": {
                "pathName": "/v1/orders",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetOrders.in.json",
                "out": "./lib/schemas/GetOrders.out.json"
            }
        },
        "GetPaymentIntents": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPaymentIntents",
            "description": "Returns a list of PaymentIntents.",
            "callParams": {
                "pathName": "/v1/payment_intents",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentIntents.in.json",
                "out": "./lib/schemas/GetPaymentIntents.out.json"
            }
        },
        "GetInvoiceitems": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetInvoiceitems",
            "description": "Returns a list of your invoice items. Invoice items are returned sorted by\ncreation date, with the most recently created invoice items appearing first.",
            "callParams": {
                "pathName": "/v1/invoiceitems",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoiceitems.in.json",
                "out": "./lib/schemas/GetInvoiceitems.out.json"
            }
        },
        "GetPaymentLinks": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPaymentLinks",
            "description": "Returns a list of your payment links.",
            "callParams": {
                "pathName": "/v1/payment_links",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentLinks.in.json",
                "out": "./lib/schemas/GetPaymentLinks.out.json"
            }
        },
        "GetPaymentLinksPaymentLinkLineItems": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPaymentLinksPaymentLinkLineItems",
            "description": "When retrieving a payment link, there is an includable line_items property\ncontaining the first handful of those items. There is also a URL where you can\nretrieve the full (paginated) list of line items.",
            "callParams": {
                "pathName": "/v1/payment_links/{payment_link}/line_items",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentLinksPaymentLinkLineItems.in.json",
                "out": "./lib/schemas/GetPaymentLinksPaymentLinkLineItems.out.json"
            }
        },
        "GetPaymentMethods": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPaymentMethods",
            "description": "Returns a list of PaymentMethods. For listing a customer's payment methods, you\nshould use List a Customer's PaymentMethods\n[/docs/api/payment_methods/customer_list]",
            "callParams": {
                "pathName": "/v1/payment_methods",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentMethods.in.json",
                "out": "./lib/schemas/GetPaymentMethods.out.json"
            }
        },
        "GetPricesSearch": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPricesSearch",
            "description": "Search for prices you've previously created using Stripe's Search Query Language\n[/docs/search#search-query-language]. Don't use search in read-after-write flows\nwhere strict consistency is necessary. Under normal operating conditions, data\nis searchable in less than a minute. Occasionally, propagation of new or updated\ndata can be up to an hour behind during outages. Search functionality is not\navailable to merchants in India.",
            "callParams": {
                "pathName": "/v1/prices/search",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPricesSearch.in.json",
                "out": "./lib/schemas/GetPricesSearch.out.json"
            }
        },
        "GetProductsSearch": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetProductsSearch",
            "description": "Search for products you've previously created using Stripe's Search Query\nLanguage [/docs/search#search-query-language]. Don't use search in\nread-after-write flows where strict consistency is necessary. Under normal\noperating conditions, data is searchable in less than a minute. Occasionally,\npropagation of new or updated data can be up to an hour behind during outages.\nSearch functionality is not available to merchants in India.",
            "callParams": {
                "pathName": "/v1/products/search",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetProductsSearch.in.json",
                "out": "./lib/schemas/GetProductsSearch.out.json"
            }
        },
        "GetProducts": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetProducts",
            "description": "Returns a list of your products. The products are returned sorted by creation\ndate, with the most recently created products appearing first.",
            "callParams": {
                "pathName": "/v1/products",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetProducts.in.json",
                "out": "./lib/schemas/GetProducts.out.json"
            }
        },
        "GetPlans": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPlans",
            "description": "Returns a list of your plans.",
            "callParams": {
                "pathName": "/v1/plans",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPlans.in.json",
                "out": "./lib/schemas/GetPlans.out.json"
            }
        },
        "GetPaymentIntentsSearch": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPaymentIntentsSearch",
            "description": "Search for PaymentIntents you've previously created using Stripe's Search Query\nLanguage [/docs/search#search-query-language]. Don't use search in\nread-after-write flows where strict consistency is necessary. Under normal\noperating conditions, data is searchable in less than a minute. Occasionally,\npropagation of new or updated data can be up to an hour behind during outages.\nSearch functionality is not available to merchants in India.",
            "callParams": {
                "pathName": "/v1/payment_intents/search",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentIntentsSearch.in.json",
                "out": "./lib/schemas/GetPaymentIntentsSearch.out.json"
            }
        },
        "GetPrices": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPrices",
            "description": "Returns a list of your prices.",
            "callParams": {
                "pathName": "/v1/prices",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPrices.in.json",
                "out": "./lib/schemas/GetPrices.out.json"
            }
        },
        "GetQuotes": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetQuotes",
            "description": "Returns a list of your quotes.",
            "callParams": {
                "pathName": "/v1/quotes",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetQuotes.in.json",
                "out": "./lib/schemas/GetQuotes.out.json"
            }
        },
        "GetQuotesQuoteLineItems": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetQuotesQuoteLineItems",
            "description": "When retrieving a quote, there is an includable line_items property containing\nthe first handful of those items. There is also a URL where you can retrieve the\nfull (paginated) list of line items.",
            "callParams": {
                "pathName": "/v1/quotes/{quote}/line_items",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetQuotesQuoteLineItems.in.json",
                "out": "./lib/schemas/GetQuotesQuoteLineItems.out.json"
            }
        },
        "GetRadarEarlyFraudWarnings": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetRadarEarlyFraudWarnings",
            "description": "Returns a list of early fraud warnings.",
            "callParams": {
                "pathName": "/v1/radar/early_fraud_warnings",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRadarEarlyFraudWarnings.in.json",
                "out": "./lib/schemas/GetRadarEarlyFraudWarnings.out.json"
            }
        },
        "GetRadarValueLists": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetRadarValueLists",
            "description": "Returns a list of ValueList objects. The objects are sorted in descending order\nby creation date, with the most recently created object appearing first.",
            "callParams": {
                "pathName": "/v1/radar/value_lists",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRadarValueLists.in.json",
                "out": "./lib/schemas/GetRadarValueLists.out.json"
            }
        },
        "GetQuotesQuotePdf": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetQuotesQuotePdf",
            "description": "Download the PDF for a finalized quote",
            "callParams": {
                "pathName": "/v1/quotes/{quote}/pdf",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetQuotesQuotePdf.in.json",
                "out": "./lib/schemas/GetQuotesQuotePdf.out.json"
            }
        },
        "GetQuotesQuoteComputedUpfrontLineItems": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetQuotesQuoteComputedUpfrontLineItems",
            "description": "When retrieving a quote, there is an includable computed.upfront.line_items\n[https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items] \nproperty containing the first handful of those items. There is also a URL where\nyou can retrieve the full (paginated) list of upfront line items.",
            "callParams": {
                "pathName": "/v1/quotes/{quote}/computed_upfront_line_items",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetQuotesQuoteComputedUpfrontLineItems.in.json",
                "out": "./lib/schemas/GetQuotesQuoteComputedUpfrontLineItems.out.json"
            }
        },
        "GetRecipients": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetRecipients",
            "description": "Returns a list of your recipients. The recipients are returned sorted by\ncreation date, with the most recently created recipients appearing first.",
            "callParams": {
                "pathName": "/v1/recipients",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRecipients.in.json",
                "out": "./lib/schemas/GetRecipients.out.json"
            }
        },
        "GetRefunds": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetRefunds",
            "description": "Returns a list of all refunds you've previously created. The refunds are\nreturned in sorted order, with the most recent refunds appearing first. For\nconvenience, the 10 most recent refunds are always available by default on the\ncharge object.",
            "callParams": {
                "pathName": "/v1/refunds",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRefunds.in.json",
                "out": "./lib/schemas/GetRefunds.out.json"
            }
        },
        "GetReviews": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetReviews",
            "description": "Returns a list of Review objects that have open set to true. The objects are\nsorted in descending order by creation date, with the most recently created\nobject appearing first.",
            "callParams": {
                "pathName": "/v1/reviews",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetReviews.in.json",
                "out": "./lib/schemas/GetReviews.out.json"
            }
        },
        "GetSetupAttempts": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSetupAttempts",
            "description": "Returns a list of SetupAttempts associated with a provided SetupIntent.",
            "callParams": {
                "pathName": "/v1/setup_attempts",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSetupAttempts.in.json",
                "out": "./lib/schemas/GetSetupAttempts.out.json"
            }
        },
        "GetSetupIntents": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSetupIntents",
            "description": "Returns a list of SetupIntents.",
            "callParams": {
                "pathName": "/v1/setup_intents",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSetupIntents.in.json",
                "out": "./lib/schemas/GetSetupIntents.out.json"
            }
        },
        "GetPromotionCodes": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPromotionCodes",
            "description": "Returns a list of your promotion codes.",
            "callParams": {
                "pathName": "/v1/promotion_codes",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPromotionCodes.in.json",
                "out": "./lib/schemas/GetPromotionCodes.out.json"
            }
        },
        "GetReportingReportRuns": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetReportingReportRuns",
            "description": "Returns a list of Report Runs, with the most recent appearing first.",
            "callParams": {
                "pathName": "/v1/reporting/report_runs",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetReportingReportRuns.in.json",
                "out": "./lib/schemas/GetReportingReportRuns.out.json"
            }
        },
        "GetPayouts": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetPayouts",
            "description": "Returns a list of existing payouts sent to third-party bank accounts or that\nStripe has sent you. The payouts are returned in sorted order, with the most\nrecently created payouts appearing first.",
            "callParams": {
                "pathName": "/v1/payouts",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPayouts.in.json",
                "out": "./lib/schemas/GetPayouts.out.json"
            }
        },
        "GetShippingRates": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetShippingRates",
            "description": "Returns a list of your shipping rates.",
            "callParams": {
                "pathName": "/v1/shipping_rates",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetShippingRates.in.json",
                "out": "./lib/schemas/GetShippingRates.out.json"
            }
        },
        "GetSkus": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSkus",
            "description": "Returns a list of your SKUs. The SKUs are returned sorted by creation date, with\nthe most recently created SKUs appearing first.",
            "callParams": {
                "pathName": "/v1/skus",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSkus.in.json",
                "out": "./lib/schemas/GetSkus.out.json"
            }
        },
        "GetSigmaScheduledQueryRuns": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSigmaScheduledQueryRuns",
            "description": "Returns a list of scheduled query runs.",
            "callParams": {
                "pathName": "/v1/sigma/scheduled_query_runs",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSigmaScheduledQueryRuns.in.json",
                "out": "./lib/schemas/GetSigmaScheduledQueryRuns.out.json"
            }
        },
        "GetSourcesSourceSourceTransactions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSourcesSourceSourceTransactions",
            "description": "List source transactions for a given source.",
            "callParams": {
                "pathName": "/v1/sources/{source}/source_transactions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSourcesSourceSourceTransactions.in.json",
                "out": "./lib/schemas/GetSourcesSourceSourceTransactions.out.json"
            }
        },
        "GetSubscriptionItems": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSubscriptionItems",
            "description": "Returns a list of your subscription items for a given subscription.",
            "callParams": {
                "pathName": "/v1/subscription_items",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptionItems.in.json",
                "out": "./lib/schemas/GetSubscriptionItems.out.json"
            }
        },
        "GetSubscriptionsSearch": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSubscriptionsSearch",
            "description": "Search for subscriptions you've previously created using Stripe's Search Query\nLanguage [/docs/search#search-query-language]. Don't use search in\nread-after-write flows where strict consistency is necessary. Under normal\noperating conditions, data is searchable in less than a minute. Occasionally,\npropagation of new or updated data can be up to an hour behind during outages.\nSearch functionality is not available to merchants in India.",
            "callParams": {
                "pathName": "/v1/subscriptions/search",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptionsSearch.in.json",
                "out": "./lib/schemas/GetSubscriptionsSearch.out.json"
            }
        },
        "GetSubscriptionSchedules": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSubscriptionSchedules",
            "description": "Retrieves the list of your subscription schedules.",
            "callParams": {
                "pathName": "/v1/subscription_schedules",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptionSchedules.in.json",
                "out": "./lib/schemas/GetSubscriptionSchedules.out.json"
            }
        },
        "GetTaxCodes": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTaxCodes",
            "description": "A list of all tax codes available [https://stripe.com/docs/tax/tax-categories] \nto add to Products in order to allow specific tax calculations.",
            "callParams": {
                "pathName": "/v1/tax_codes",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTaxCodes.in.json",
                "out": "./lib/schemas/GetTaxCodes.out.json"
            }
        },
        "GetSubscriptionItemsSubscriptionItemUsageRecordSummaries": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSubscriptionItemsSubscriptionItemUsageRecordSummaries",
            "description": "For the specified subscription item, returns a list of summary objects. Each\nobject in the list provides usage information that's been summarized from\nmultiple usage records and over a subscription billing period (e.g., 15 usage\nrecords in the month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list\nitem represents the most current usage period that hasn't ended yet. Since new\nusage records can still be added, the returned summary information for the\nsubscription item's ID should be seen as unstable until the subscription billing\nperiod ends.",
            "callParams": {
                "pathName": "/v1/subscription_items/{subscription_item}/usage_record_summaries",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptionItemsSubscriptionItemUsageRecordSummaries.in.json",
                "out": "./lib/schemas/GetSubscriptionItemsSubscriptionItemUsageRecordSummaries.out.json"
            }
        },
        "GetTaxRates": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTaxRates",
            "description": "Returns a list of your tax rates. Tax rates are returned sorted by creation\ndate, with the most recently created tax rates appearing first.",
            "callParams": {
                "pathName": "/v1/tax_rates",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTaxRates.in.json",
                "out": "./lib/schemas/GetTaxRates.out.json"
            }
        },
        "GetTerminalConfigurations": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTerminalConfigurations",
            "description": "Returns a list of Configuration objects.",
            "callParams": {
                "pathName": "/v1/terminal/configurations",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTerminalConfigurations.in.json",
                "out": "./lib/schemas/GetTerminalConfigurations.out.json"
            }
        },
        "GetTerminalLocations": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTerminalLocations",
            "description": "Returns a list of Location objects.",
            "callParams": {
                "pathName": "/v1/terminal/locations",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTerminalLocations.in.json",
                "out": "./lib/schemas/GetTerminalLocations.out.json"
            }
        },
        "GetTerminalReaders": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTerminalReaders",
            "description": "Returns a list of Reader objects.",
            "callParams": {
                "pathName": "/v1/terminal/readers",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTerminalReaders.in.json",
                "out": "./lib/schemas/GetTerminalReaders.out.json"
            }
        },
        "GetRadarValueListItems": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetRadarValueListItems",
            "description": "Returns a list of ValueListItem objects. The objects are sorted in descending\norder by creation date, with the most recently created object appearing first.",
            "callParams": {
                "pathName": "/v1/radar/value_list_items",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRadarValueListItems.in.json",
                "out": "./lib/schemas/GetRadarValueListItems.out.json"
            }
        },
        "GetTestHelpersTestClocks": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTestHelpersTestClocks",
            "description": "Returns a list of your test clocks.",
            "callParams": {
                "pathName": "/v1/test_helpers/test_clocks",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTestHelpersTestClocks.in.json",
                "out": "./lib/schemas/GetTestHelpersTestClocks.out.json"
            }
        },
        "GetTopups": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTopups",
            "description": "Returns a list of top-ups.",
            "callParams": {
                "pathName": "/v1/topups",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTopups.in.json",
                "out": "./lib/schemas/GetTopups.out.json"
            }
        },
        "GetSubscriptions": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetSubscriptions",
            "description": "By default, returns a list of subscriptions that have not been canceled. In\norder to list canceled subscriptions, specify status=canceled.",
            "callParams": {
                "pathName": "/v1/subscriptions",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptions.in.json",
                "out": "./lib/schemas/GetSubscriptions.out.json"
            }
        },
        "GetTransfers": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTransfers",
            "description": "Returns a list of existing transfers sent to connected accounts. The transfers\nare returned in sorted order, with the most recently created transfers appearing\nfirst.",
            "callParams": {
                "pathName": "/v1/transfers",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTransfers.in.json",
                "out": "./lib/schemas/GetTransfers.out.json"
            }
        },
        "GetWebhookEndpoints": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetWebhookEndpoints",
            "description": "Returns a list of your webhook endpoints.",
            "callParams": {
                "pathName": "/v1/webhook_endpoints",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetWebhookEndpoints.in.json",
                "out": "./lib/schemas/GetWebhookEndpoints.out.json"
            }
        },
        "GetReportingReportTypes": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetReportingReportTypes",
            "description": "Returns a full list of Report Types.",
            "callParams": {
                "pathName": "/v1/reporting/report_types",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetReportingReportTypes.in.json",
                "out": "./lib/schemas/GetReportingReportTypes.out.json"
            }
        },
        "GetTransfersIdReversals": {
            "main": "./lib/triggers/trigger.js",
            "title": "GetTransfersIdReversals",
            "description": "You can see a list of the reversals belonging to a specific transfer. Note that\nthe 10 most recent reversals are always available by default on the transfer\nobject. If you need more than those 10, you can use this API method and the \nlimit and starting_after parameters to page through additional reversals.",
            "callParams": {
                "pathName": "/v1/transfers/{id}/reversals",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTransfersIdReversals.in.json",
                "out": "./lib/schemas/GetTransfersIdReversals.out.json"
            }
        }
    },
    "actions": {
        "Post3dSecure": {
            "main": "./lib/actions/action.js",
            "title": "Post3dSecure",
            "description": "Initiate 3D Secure authentication.",
            "callParams": {
                "pathName": "/v1/3d_secure",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/Post3dSecure.in.json",
                "out": "./lib/schemas/Post3dSecure.out.json"
            }
        },
        "DeleteAccount": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccount",
            "description": "With Connect [/docs/connect], you can delete accounts you manage.\n\nAccounts created using test-mode keys can be deleted at any time. Standard\naccounts created using live-mode keys cannot be deleted. Custom or Express\naccounts created using live-mode keys can only be deleted once all balances are\nzero.\n\nIf you want to delete your own account, use the account information tab in your\naccount settings [https://dashboard.stripe.com/account] instead.",
            "callParams": {
                "pathName": "/v1/account",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccount.in.json",
                "out": "./lib/schemas/DeleteAccount.out.json"
            }
        },
        "GetAccountBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountBankAccountsId",
            "description": "Retrieve a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/account/bank_accounts/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountBankAccountsId.in.json",
                "out": "./lib/schemas/GetAccountBankAccountsId.out.json"
            }
        },
        "DeleteAccountExternalAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountExternalAccountsId",
            "description": "Delete a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/account/external_accounts/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountExternalAccountsId.in.json",
                "out": "./lib/schemas/DeleteAccountExternalAccountsId.out.json"
            }
        },
        "PostAccountBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountBankAccountsId",
            "description": "Updates the metadata, account holder name, account holder type of a bank account\nbelonging to a Custom account [/docs/connect/custom-accounts], and optionally\nsets it as the default for its currency. Other bank account details are not\neditable by design.\n\nYou can re-enable a disabled bank account by performing an update call without\nproviding any arguments or changes.",
            "callParams": {
                "pathName": "/v1/account/bank_accounts/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountBankAccountsId.in.json",
                "out": "./lib/schemas/PostAccountBankAccountsId.out.json"
            }
        },
        "DeleteAccountBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountBankAccountsId",
            "description": "Delete a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/account/bank_accounts/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountBankAccountsId.in.json",
                "out": "./lib/schemas/DeleteAccountBankAccountsId.out.json"
            }
        },
        "PostAccountBankAccounts": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountBankAccounts",
            "description": "Create an external account for a given account.",
            "callParams": {
                "pathName": "/v1/account/bank_accounts",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountBankAccounts.in.json",
                "out": "./lib/schemas/PostAccountBankAccounts.out.json"
            }
        },
        "PostAccountExternalAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountExternalAccountsId",
            "description": "Updates the metadata, account holder name, account holder type of a bank account\nbelonging to a Custom account [/docs/connect/custom-accounts], and optionally\nsets it as the default for its currency. Other bank account details are not\neditable by design.\n\nYou can re-enable a disabled bank account by performing an update call without\nproviding any arguments or changes.",
            "callParams": {
                "pathName": "/v1/account/external_accounts/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountExternalAccountsId.in.json",
                "out": "./lib/schemas/PostAccountExternalAccountsId.out.json"
            }
        },
        "PostAccountExternalAccounts": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountExternalAccounts",
            "description": "Create an external account for a given account.",
            "callParams": {
                "pathName": "/v1/account/external_accounts",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountExternalAccounts.in.json",
                "out": "./lib/schemas/PostAccountExternalAccounts.out.json"
            }
        },
        "DeleteAccountPeoplePerson": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountPeoplePerson",
            "description": "Deletes an existing person's relationship to the account's legal entity. Any\nperson with a relationship for an account can be deleted through the API, except\nif the person is the account_opener. If your integration is using the executive \nparameter, you cannot delete the only verified executive on file.",
            "callParams": {
                "pathName": "/v1/account/people/{person}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountPeoplePerson.in.json",
                "out": "./lib/schemas/DeleteAccountPeoplePerson.out.json"
            }
        },
        "PostAccountPeoplePerson": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountPeoplePerson",
            "description": "Updates an existing person.",
            "callParams": {
                "pathName": "/v1/account/people/{person}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountPeoplePerson.in.json",
                "out": "./lib/schemas/PostAccountPeoplePerson.out.json"
            }
        },
        "GetAccountPeoplePerson": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountPeoplePerson",
            "description": "Retrieves an existing person.",
            "callParams": {
                "pathName": "/v1/account/people/{person}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountPeoplePerson.in.json",
                "out": "./lib/schemas/GetAccountPeoplePerson.out.json"
            }
        },
        "DeleteAccountPersonsPerson": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountPersonsPerson",
            "description": "Deletes an existing person's relationship to the account's legal entity. Any\nperson with a relationship for an account can be deleted through the API, except\nif the person is the account_opener. If your integration is using the executive \nparameter, you cannot delete the only verified executive on file.",
            "callParams": {
                "pathName": "/v1/account/persons/{person}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountPersonsPerson.in.json",
                "out": "./lib/schemas/DeleteAccountPersonsPerson.out.json"
            }
        },
        "PostAccountPersonsPerson": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountPersonsPerson",
            "description": "Updates an existing person.",
            "callParams": {
                "pathName": "/v1/account/persons/{person}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountPersonsPerson.in.json",
                "out": "./lib/schemas/PostAccountPersonsPerson.out.json"
            }
        },
        "GetAccountCapabilitiesCapability": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountCapabilitiesCapability",
            "description": "Retrieves information about the specified Account Capability.",
            "callParams": {
                "pathName": "/v1/account/capabilities/{capability}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountCapabilitiesCapability.in.json",
                "out": "./lib/schemas/GetAccountCapabilitiesCapability.out.json"
            }
        },
        "PostAccountLinks": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountLinks",
            "description": "Creates an AccountLink object that includes a single-use Stripe URL that the\nplatform can redirect their user to in order to take them through the Connect\nOnboarding flow.",
            "callParams": {
                "pathName": "/v1/account_links",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountLinks.in.json",
                "out": "./lib/schemas/PostAccountLinks.out.json"
            }
        },
        "DeleteAccountsAccount": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountsAccount",
            "description": "With Connect [/docs/connect], you can delete accounts you manage.\n\nAccounts created using test-mode keys can be deleted at any time. Standard\naccounts created using live-mode keys cannot be deleted. Custom or Express\naccounts created using live-mode keys can only be deleted once all balances are\nzero.\n\nIf you want to delete your own account, use the account information tab in your\naccount settings [https://dashboard.stripe.com/account] instead.",
            "callParams": {
                "pathName": "/v1/accounts/{account}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountsAccount.in.json",
                "out": "./lib/schemas/DeleteAccountsAccount.out.json"
            }
        },
        "Get3dSecureThreeDSecure": {
            "main": "./lib/actions/action.js",
            "title": "Get3dSecureThreeDSecure",
            "description": "Retrieves a 3D Secure object.",
            "callParams": {
                "pathName": "/v1/3d_secure/{three_d_secure}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/Get3dSecureThreeDSecure.in.json",
                "out": "./lib/schemas/Get3dSecureThreeDSecure.out.json"
            }
        },
        "DeleteAccountsAccountBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountsAccountBankAccountsId",
            "description": "Delete a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/bank_accounts/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountsAccountBankAccountsId.in.json",
                "out": "./lib/schemas/DeleteAccountsAccountBankAccountsId.out.json"
            }
        },
        "PostAccountPersons": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountPersons",
            "description": "Creates a new person.",
            "callParams": {
                "pathName": "/v1/account/persons",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountPersons.in.json",
                "out": "./lib/schemas/PostAccountPersons.out.json"
            }
        },
        "GetAccountPersonsPerson": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountPersonsPerson",
            "description": "Retrieves an existing person.",
            "callParams": {
                "pathName": "/v1/account/persons/{person}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountPersonsPerson.in.json",
                "out": "./lib/schemas/GetAccountPersonsPerson.out.json"
            }
        },
        "PostAccountPeople": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountPeople",
            "description": "Creates a new person.",
            "callParams": {
                "pathName": "/v1/account/people",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountPeople.in.json",
                "out": "./lib/schemas/PostAccountPeople.out.json"
            }
        },
        "GetAccountsAccountBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountsAccountBankAccountsId",
            "description": "Retrieve a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/bank_accounts/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountBankAccountsId.in.json",
                "out": "./lib/schemas/GetAccountsAccountBankAccountsId.out.json"
            }
        },
        "PostAccountsAccount": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccount",
            "description": "Updates a connected account [/docs/connect/accounts] by setting the values of\nthe parameters passed. Any parameters not provided are left unchanged. Most\nparameters can be changed only for Custom accounts. (These are marked Custom\nOnly below.) Parameters marked Custom and Express are not supported for Standard\naccounts.\n\nTo update your own account, use the Dashboard\n[https://dashboard.stripe.com/account]. Refer to our Connect\n[/docs/connect/updating-accounts] documentation to learn more about updating\naccounts.",
            "callParams": {
                "pathName": "/v1/accounts/{account}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccount.in.json",
                "out": "./lib/schemas/PostAccountsAccount.out.json"
            }
        },
        "PostAccountsAccountBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountBankAccountsId",
            "description": "Updates the metadata, account holder name, account holder type of a bank account\nbelonging to a Custom account [/docs/connect/custom-accounts], and optionally\nsets it as the default for its currency. Other bank account details are not\neditable by design.\n\nYou can re-enable a disabled bank account by performing an update call without\nproviding any arguments or changes.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/bank_accounts/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountBankAccountsId.in.json",
                "out": "./lib/schemas/PostAccountsAccountBankAccountsId.out.json"
            }
        },
        "GetAccountExternalAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountExternalAccountsId",
            "description": "Retrieve a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/account/external_accounts/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountExternalAccountsId.in.json",
                "out": "./lib/schemas/GetAccountExternalAccountsId.out.json"
            }
        },
        "GetAccountsAccount": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountsAccount",
            "description": "Retrieves the details of an account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccount.in.json",
                "out": "./lib/schemas/GetAccountsAccount.out.json"
            }
        },
        "GetAccountsAccountCapabilitiesCapability": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountsAccountCapabilitiesCapability",
            "description": "Retrieves information about the specified Account Capability.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/capabilities/{capability}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountCapabilitiesCapability.in.json",
                "out": "./lib/schemas/GetAccountsAccountCapabilitiesCapability.out.json"
            }
        },
        "PostAccountsAccountBankAccounts": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountBankAccounts",
            "description": "Create an external account for a given account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/bank_accounts",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountBankAccounts.in.json",
                "out": "./lib/schemas/PostAccountsAccountBankAccounts.out.json"
            }
        },
        "PostAccountsAccountExternalAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountExternalAccountsId",
            "description": "Updates the metadata, account holder name, account holder type of a bank account\nbelonging to a Custom account [/docs/connect/custom-accounts], and optionally\nsets it as the default for its currency. Other bank account details are not\neditable by design.\n\nYou can re-enable a disabled bank account by performing an update call without\nproviding any arguments or changes.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/external_accounts/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountExternalAccountsId.in.json",
                "out": "./lib/schemas/PostAccountsAccountExternalAccountsId.out.json"
            }
        },
        "PostAccountsAccountCapabilitiesCapability": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountCapabilitiesCapability",
            "description": "Updates an existing Account Capability.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/capabilities/{capability}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountCapabilitiesCapability.in.json",
                "out": "./lib/schemas/PostAccountsAccountCapabilitiesCapability.out.json"
            }
        },
        "PostAccountsAccountLoginLinks": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountLoginLinks",
            "description": "Creates a single-use login link for an Express account to access their Stripe\ndashboard.\n\nYou may only create login links for Express accounts\n[/docs/connect/express-accounts] connected to your platform.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/login_links",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountLoginLinks.in.json",
                "out": "./lib/schemas/PostAccountsAccountLoginLinks.out.json"
            }
        },
        "PostAccountsAccountExternalAccounts": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountExternalAccounts",
            "description": "Create an external account for a given account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/external_accounts",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountExternalAccounts.in.json",
                "out": "./lib/schemas/PostAccountsAccountExternalAccounts.out.json"
            }
        },
        "PostAccountsAccountPeople": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountPeople",
            "description": "Creates a new person.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/people",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountPeople.in.json",
                "out": "./lib/schemas/PostAccountsAccountPeople.out.json"
            }
        },
        "DeleteAccountsAccountExternalAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountsAccountExternalAccountsId",
            "description": "Delete a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/external_accounts/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountsAccountExternalAccountsId.in.json",
                "out": "./lib/schemas/DeleteAccountsAccountExternalAccountsId.out.json"
            }
        },
        "PostAccountsAccountPeoplePerson": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountPeoplePerson",
            "description": "Updates an existing person.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/people/{person}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountPeoplePerson.in.json",
                "out": "./lib/schemas/PostAccountsAccountPeoplePerson.out.json"
            }
        },
        "PostAccountsAccountPersons": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountPersons",
            "description": "Creates a new person.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/persons",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountPersons.in.json",
                "out": "./lib/schemas/PostAccountsAccountPersons.out.json"
            }
        },
        "GetAccountsAccountPersonsPerson": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountsAccountPersonsPerson",
            "description": "Retrieves an existing person.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/persons/{person}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountPersonsPerson.in.json",
                "out": "./lib/schemas/GetAccountsAccountPersonsPerson.out.json"
            }
        },
        "PostApplePayDomains": {
            "main": "./lib/actions/action.js",
            "title": "PostApplePayDomains",
            "description": "Create an apple pay domain.",
            "callParams": {
                "pathName": "/v1/apple_pay/domains",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostApplePayDomains.in.json",
                "out": "./lib/schemas/PostApplePayDomains.out.json"
            }
        },
        "PostAccounts": {
            "main": "./lib/actions/action.js",
            "title": "PostAccounts",
            "description": "With Connect [/docs/connect], you can create Stripe accounts for your users. To\ndo this, you'll first need to register your platform\n[https://dashboard.stripe.com/account/applications/settings].",
            "callParams": {
                "pathName": "/v1/accounts",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccounts.in.json",
                "out": "./lib/schemas/PostAccounts.out.json"
            }
        },
        "DeleteApplePayDomainsDomain": {
            "main": "./lib/actions/action.js",
            "title": "DeleteApplePayDomainsDomain",
            "description": "Delete an apple pay domain.",
            "callParams": {
                "pathName": "/v1/apple_pay/domains/{domain}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteApplePayDomainsDomain.in.json",
                "out": "./lib/schemas/DeleteApplePayDomainsDomain.out.json"
            }
        },
        "DeleteAccountsAccountPersonsPerson": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountsAccountPersonsPerson",
            "description": "Deletes an existing person's relationship to the account's legal entity. Any\nperson with a relationship for an account can be deleted through the API, except\nif the person is the account_opener. If your integration is using the executive \nparameter, you cannot delete the only verified executive on file.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/persons/{person}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountsAccountPersonsPerson.in.json",
                "out": "./lib/schemas/DeleteAccountsAccountPersonsPerson.out.json"
            }
        },
        "GetApplicationFeesId": {
            "main": "./lib/actions/action.js",
            "title": "GetApplicationFeesId",
            "description": "Retrieves the details of an application fee that your account has collected. The\nsame information is returned when refunding the application fee.",
            "callParams": {
                "pathName": "/v1/application_fees/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetApplicationFeesId.in.json",
                "out": "./lib/schemas/GetApplicationFeesId.out.json"
            }
        },
        "GetAccountsAccountExternalAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountsAccountExternalAccountsId",
            "description": "Retrieve a specified external account for a given account.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/external_accounts/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountExternalAccountsId.in.json",
                "out": "./lib/schemas/GetAccountsAccountExternalAccountsId.out.json"
            }
        },
        "GetApplePayDomainsDomain": {
            "main": "./lib/actions/action.js",
            "title": "GetApplePayDomainsDomain",
            "description": "Retrieve an apple pay domain.",
            "callParams": {
                "pathName": "/v1/apple_pay/domains/{domain}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetApplePayDomainsDomain.in.json",
                "out": "./lib/schemas/GetApplePayDomainsDomain.out.json"
            }
        },
        "PostApplicationFeesIdRefund": {
            "main": "./lib/actions/action.js",
            "title": "PostApplicationFeesIdRefund",
            "description": "",
            "callParams": {
                "pathName": "/v1/application_fees/{id}/refund",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostApplicationFeesIdRefund.in.json",
                "out": "./lib/schemas/PostApplicationFeesIdRefund.out.json"
            }
        },
        "PostAccount": {
            "main": "./lib/actions/action.js",
            "title": "PostAccount",
            "description": "Updates a connected account [/docs/connect/accounts] by setting the values of\nthe parameters passed. Any parameters not provided are left unchanged. Most\nparameters can be changed only for Custom accounts. (These are marked Custom\nOnly below.) Parameters marked Custom and Express are not supported for Standard\naccounts.\n\nTo update your own account, use the Dashboard\n[https://dashboard.stripe.com/account]. Refer to our Connect\n[/docs/connect/updating-accounts] documentation to learn more about updating\naccounts.",
            "callParams": {
                "pathName": "/v1/account",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccount.in.json",
                "out": "./lib/schemas/PostAccount.out.json"
            }
        },
        "GetBalanceTransactionsId": {
            "main": "./lib/actions/action.js",
            "title": "GetBalanceTransactionsId",
            "description": "Retrieves the balance transaction with the given ID.\n\nNote that this endpoint previously used the path /v1/balance/history/:id.",
            "callParams": {
                "pathName": "/v1/balance_transactions/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBalanceTransactionsId.in.json",
                "out": "./lib/schemas/GetBalanceTransactionsId.out.json"
            }
        },
        "GetBalanceHistoryId": {
            "main": "./lib/actions/action.js",
            "title": "GetBalanceHistoryId",
            "description": "Retrieves the balance transaction with the given ID.\n\nNote that this endpoint previously used the path /v1/balance/history/:id.",
            "callParams": {
                "pathName": "/v1/balance/history/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBalanceHistoryId.in.json",
                "out": "./lib/schemas/GetBalanceHistoryId.out.json"
            }
        },
        "PostBillingPortalConfigurations": {
            "main": "./lib/actions/action.js",
            "title": "PostBillingPortalConfigurations",
            "description": "Creates a configuration that describes the functionality and behavior of a\nPortalSession",
            "callParams": {
                "pathName": "/v1/billing_portal/configurations",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostBillingPortalConfigurations.in.json",
                "out": "./lib/schemas/PostBillingPortalConfigurations.out.json"
            }
        },
        "GetApplicationFeesFeeRefundsId": {
            "main": "./lib/actions/action.js",
            "title": "GetApplicationFeesFeeRefundsId",
            "description": "By default, you can see the 10 most recent refunds stored directly on the\napplication fee object, but you can also retrieve details about a specific\nrefund stored on the application fee.",
            "callParams": {
                "pathName": "/v1/application_fees/{fee}/refunds/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetApplicationFeesFeeRefundsId.in.json",
                "out": "./lib/schemas/GetApplicationFeesFeeRefundsId.out.json"
            }
        },
        "PostBillingPortalConfigurationsConfiguration": {
            "main": "./lib/actions/action.js",
            "title": "PostBillingPortalConfigurationsConfiguration",
            "description": "Updates a configuration that describes the functionality of the customer portal.",
            "callParams": {
                "pathName": "/v1/billing_portal/configurations/{configuration}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostBillingPortalConfigurationsConfiguration.in.json",
                "out": "./lib/schemas/PostBillingPortalConfigurationsConfiguration.out.json"
            }
        },
        "GetBillingPortalConfigurationsConfiguration": {
            "main": "./lib/actions/action.js",
            "title": "GetBillingPortalConfigurationsConfiguration",
            "description": "Retrieves a configuration that describes the functionality of the customer\nportal.",
            "callParams": {
                "pathName": "/v1/billing_portal/configurations/{configuration}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBillingPortalConfigurationsConfiguration.in.json",
                "out": "./lib/schemas/GetBillingPortalConfigurationsConfiguration.out.json"
            }
        },
        "PostAccountsAccountReject": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountReject",
            "description": "With Connect [/docs/connect], you may flag accounts as suspicious.\n\nTest-mode Custom and Express accounts can be rejected at any time. Accounts\ncreated using live-mode keys may only be rejected once all balances are zero.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/reject",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountReject.in.json",
                "out": "./lib/schemas/PostAccountsAccountReject.out.json"
            }
        },
        "PostAccountLoginLinks": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountLoginLinks",
            "description": "Creates a single-use login link for an Express account to access their Stripe\ndashboard.\n\nYou may only create login links for Express accounts\n[/docs/connect/express-accounts] connected to your platform.",
            "callParams": {
                "pathName": "/v1/account/login_links",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountLoginLinks.in.json",
                "out": "./lib/schemas/PostAccountLoginLinks.out.json"
            }
        },
        "PostApplicationFeesIdRefunds": {
            "main": "./lib/actions/action.js",
            "title": "PostApplicationFeesIdRefunds",
            "description": "Refunds an application fee that has previously been collected but not yet\nrefunded. Funds will be refunded to the Stripe account from which the fee was\noriginally collected.\n\nYou can optionally refund only part of an application fee. You can do so\nmultiple times, until the entire fee has been refunded.\n\nOnce entirely refunded, an application fee can't be refunded again. This method\nwill raise an error when called on an already-refunded application fee, or when\ntrying to refund more money than is left on an application fee.",
            "callParams": {
                "pathName": "/v1/application_fees/{id}/refunds",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostApplicationFeesIdRefunds.in.json",
                "out": "./lib/schemas/PostApplicationFeesIdRefunds.out.json"
            }
        },
        "GetBitcoinReceiversId": {
            "main": "./lib/actions/action.js",
            "title": "GetBitcoinReceiversId",
            "description": "Retrieves the Bitcoin receiver with the given ID.",
            "callParams": {
                "pathName": "/v1/bitcoin/receivers/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetBitcoinReceiversId.in.json",
                "out": "./lib/schemas/GetBitcoinReceiversId.out.json"
            }
        },
        "PostAccountsAccountPersonsPerson": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountsAccountPersonsPerson",
            "description": "Updates an existing person.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/persons/{person}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountsAccountPersonsPerson.in.json",
                "out": "./lib/schemas/PostAccountsAccountPersonsPerson.out.json"
            }
        },
        "PostBillingPortalSessions": {
            "main": "./lib/actions/action.js",
            "title": "PostBillingPortalSessions",
            "description": "Creates a session of the customer portal.",
            "callParams": {
                "pathName": "/v1/billing_portal/sessions",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostBillingPortalSessions.in.json",
                "out": "./lib/schemas/PostBillingPortalSessions.out.json"
            }
        },
        "GetAccountsAccountPeoplePerson": {
            "main": "./lib/actions/action.js",
            "title": "GetAccountsAccountPeoplePerson",
            "description": "Retrieves an existing person.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/people/{person}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountsAccountPeoplePerson.in.json",
                "out": "./lib/schemas/GetAccountsAccountPeoplePerson.out.json"
            }
        },
        "PostCharges": {
            "main": "./lib/actions/action.js",
            "title": "PostCharges",
            "description": "To charge a credit card or other payment source, you create a Charge object. If\nyour API key is in test mode, the supplied payment source (e.g., card) won't\nactually be charged, although everything else will occur as if in live mode.\n(Stripe assumes that the charge would have completed successfully).",
            "callParams": {
                "pathName": "/v1/charges",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCharges.in.json",
                "out": "./lib/schemas/PostCharges.out.json"
            }
        },
        "PostChargesCharge": {
            "main": "./lib/actions/action.js",
            "title": "PostChargesCharge",
            "description": "Updates the specified charge by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/charges/{charge}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostChargesCharge.in.json",
                "out": "./lib/schemas/PostChargesCharge.out.json"
            }
        },
        "PostChargesChargeDispute": {
            "main": "./lib/actions/action.js",
            "title": "PostChargesChargeDispute",
            "description": "",
            "callParams": {
                "pathName": "/v1/charges/{charge}/dispute",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostChargesChargeDispute.in.json",
                "out": "./lib/schemas/PostChargesChargeDispute.out.json"
            }
        },
        "PostAccountCapabilitiesCapability": {
            "main": "./lib/actions/action.js",
            "title": "PostAccountCapabilitiesCapability",
            "description": "Updates an existing Account Capability.",
            "callParams": {
                "pathName": "/v1/account/capabilities/{capability}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostAccountCapabilitiesCapability.in.json",
                "out": "./lib/schemas/PostAccountCapabilitiesCapability.out.json"
            }
        },
        "PostChargesChargeDisputeClose": {
            "main": "./lib/actions/action.js",
            "title": "PostChargesChargeDisputeClose",
            "description": "",
            "callParams": {
                "pathName": "/v1/charges/{charge}/dispute/close",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostChargesChargeDisputeClose.in.json",
                "out": "./lib/schemas/PostChargesChargeDisputeClose.out.json"
            }
        },
        "PostChargesChargeRefunds": {
            "main": "./lib/actions/action.js",
            "title": "PostChargesChargeRefunds",
            "description": "Create a refund.",
            "callParams": {
                "pathName": "/v1/charges/{charge}/refunds",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostChargesChargeRefunds.in.json",
                "out": "./lib/schemas/PostChargesChargeRefunds.out.json"
            }
        },
        "DeleteAccountsAccountPeoplePerson": {
            "main": "./lib/actions/action.js",
            "title": "DeleteAccountsAccountPeoplePerson",
            "description": "Deletes an existing person's relationship to the account's legal entity. Any\nperson with a relationship for an account can be deleted through the API, except\nif the person is the account_opener. If your integration is using the executive \nparameter, you cannot delete the only verified executive on file.",
            "callParams": {
                "pathName": "/v1/accounts/{account}/people/{person}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountsAccountPeoplePerson.in.json",
                "out": "./lib/schemas/DeleteAccountsAccountPeoplePerson.out.json"
            }
        },
        "PostCheckoutSessions": {
            "main": "./lib/actions/action.js",
            "title": "PostCheckoutSessions",
            "description": "Creates a Session object.",
            "callParams": {
                "pathName": "/v1/checkout/sessions",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCheckoutSessions.in.json",
                "out": "./lib/schemas/PostCheckoutSessions.out.json"
            }
        },
        "GetChargesChargeRefundsRefund": {
            "main": "./lib/actions/action.js",
            "title": "GetChargesChargeRefundsRefund",
            "description": "Retrieves the details of an existing refund.",
            "callParams": {
                "pathName": "/v1/charges/{charge}/refunds/{refund}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetChargesChargeRefundsRefund.in.json",
                "out": "./lib/schemas/GetChargesChargeRefundsRefund.out.json"
            }
        },
        "GetCheckoutSessionsSession": {
            "main": "./lib/actions/action.js",
            "title": "GetCheckoutSessionsSession",
            "description": "Retrieves a Session object.",
            "callParams": {
                "pathName": "/v1/checkout/sessions/{session}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCheckoutSessionsSession.in.json",
                "out": "./lib/schemas/GetCheckoutSessionsSession.out.json"
            }
        },
        "PostApplicationFeesFeeRefundsId": {
            "main": "./lib/actions/action.js",
            "title": "PostApplicationFeesFeeRefundsId",
            "description": "Updates the specified application fee refund by setting the values of the\nparameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument.",
            "callParams": {
                "pathName": "/v1/application_fees/{fee}/refunds/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostApplicationFeesFeeRefundsId.in.json",
                "out": "./lib/schemas/PostApplicationFeesFeeRefundsId.out.json"
            }
        },
        "GetCouponsCoupon": {
            "main": "./lib/actions/action.js",
            "title": "GetCouponsCoupon",
            "description": "Retrieves the coupon with the given ID.",
            "callParams": {
                "pathName": "/v1/coupons/{coupon}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCouponsCoupon.in.json",
                "out": "./lib/schemas/GetCouponsCoupon.out.json"
            }
        },
        "PostCouponsCoupon": {
            "main": "./lib/actions/action.js",
            "title": "PostCouponsCoupon",
            "description": "Updates the metadata of a coupon. Other coupon details (currency, duration,\namount_off) are, by design, not editable.",
            "callParams": {
                "pathName": "/v1/coupons/{coupon}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCouponsCoupon.in.json",
                "out": "./lib/schemas/PostCouponsCoupon.out.json"
            }
        },
        "GetChargesCharge": {
            "main": "./lib/actions/action.js",
            "title": "GetChargesCharge",
            "description": "Retrieves the details of a charge that has previously been created. Supply the\nunique charge ID that was returned from your previous request, and Stripe will\nreturn the corresponding charge information. The same information is returned\nwhen creating or refunding the charge.",
            "callParams": {
                "pathName": "/v1/charges/{charge}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetChargesCharge.in.json",
                "out": "./lib/schemas/GetChargesCharge.out.json"
            }
        },
        "DeleteCouponsCoupon": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCouponsCoupon",
            "description": "You can delete coupons via the coupon management\n[https://dashboard.stripe.com/coupons] page of the Stripe dashboard. However,\ndeleting a coupon does not affect any customers who have already applied the\ncoupon; it means that new customers can't redeem the coupon. You can also delete\ncoupons via the API.",
            "callParams": {
                "pathName": "/v1/coupons/{coupon}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCouponsCoupon.in.json",
                "out": "./lib/schemas/DeleteCouponsCoupon.out.json"
            }
        },
        "PostCoupons": {
            "main": "./lib/actions/action.js",
            "title": "PostCoupons",
            "description": "You can create coupons easily via the coupon management\n[https://dashboard.stripe.com/coupons] page of the Stripe dashboard. Coupon\ncreation is also accessible via the API if you need to create coupons on the\nfly.\n\nA coupon has either a percent_off or an amount_off and currency. If you set an \namount_off, that amount will be subtracted from any invoice's subtotal. For\nexample, an invoice with a subtotal of 100 will have a final total of 0 if a\ncoupon with an amount_off of 200 is applied to it and an invoice with a subtotal\nof 300 will have a final total of 100 if a coupon with an amount_off of 200 is\napplied to it.",
            "callParams": {
                "pathName": "/v1/coupons",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCoupons.in.json",
                "out": "./lib/schemas/PostCoupons.out.json"
            }
        },
        "GetCreditNotesId": {
            "main": "./lib/actions/action.js",
            "title": "GetCreditNotesId",
            "description": "Retrieves the credit note object with the given identifier.",
            "callParams": {
                "pathName": "/v1/credit_notes/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCreditNotesId.in.json",
                "out": "./lib/schemas/GetCreditNotesId.out.json"
            }
        },
        "PostCreditNotes": {
            "main": "./lib/actions/action.js",
            "title": "PostCreditNotes",
            "description": "Issue a credit note to adjust the amount of a finalized invoice. For a \nstatus=open invoice, a credit note reduces its amount_due. For a status=paid \ninvoice, a credit note does not affect its amount_due. Instead, it can result in\nany combination of the following:\n\n * Refund: create a new refund (using refund_amount) or link an existing refund\n   (using refund).\n * Customer balance credit: credit the customer's balance (using credit_amount)\n   which will be automatically applied to their next invoice when it's\n   finalized.\n * Outside of Stripe credit: record the amount that is or will be credited\n   outside of Stripe (using out_of_band_amount).\n\nFor post-payment credit notes the sum of the refund, credit and outside of\nStripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will\nincrement the invoice's pre_payment_credit_notes_amountor \npost_payment_credit_notes_amount depending on its status at the time of credit\nnote creation.",
            "callParams": {
                "pathName": "/v1/credit_notes",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCreditNotes.in.json",
                "out": "./lib/schemas/PostCreditNotes.out.json"
            }
        },
        "GetCustomersCustomer": {
            "main": "./lib/actions/action.js",
            "title": "GetCustomersCustomer",
            "description": "Retrieves a Customer object.",
            "callParams": {
                "pathName": "/v1/customers/{customer}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomer.in.json",
                "out": "./lib/schemas/GetCustomersCustomer.out.json"
            }
        },
        "PostCustomers": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomers",
            "description": "Creates a new customer object.",
            "callParams": {
                "pathName": "/v1/customers",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomers.in.json",
                "out": "./lib/schemas/PostCustomers.out.json"
            }
        },
        "PostCustomersCustomerBankAccounts": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerBankAccounts",
            "description": "When you create a new credit card, you must specify a customer or recipient on\nwhich to create it.\n\nIf the card's owner has no default card, then the new card will become the\ndefault. However, if the owner already has a default, then it will not change.\nTo change the default, you should update the customer\n[/docs/api#update_customer] to have a new default_source.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/bank_accounts",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerBankAccounts.in.json",
                "out": "./lib/schemas/PostCustomersCustomerBankAccounts.out.json"
            }
        },
        "PostCustomersCustomerBalanceTransactionsTransaction": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerBalanceTransactionsTransaction",
            "description": "Most credit balance transaction fields are immutable, but you may update its \ndescription and metadata.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/balance_transactions/{transaction}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerBalanceTransactionsTransaction.in.json",
                "out": "./lib/schemas/PostCustomersCustomerBalanceTransactionsTransaction.out.json"
            }
        },
        "PostCreditNotesId": {
            "main": "./lib/actions/action.js",
            "title": "PostCreditNotesId",
            "description": "Updates an existing credit note.",
            "callParams": {
                "pathName": "/v1/credit_notes/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCreditNotesId.in.json",
                "out": "./lib/schemas/PostCreditNotesId.out.json"
            }
        },
        "DeleteCustomersCustomer": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomer",
            "description": "Permanently deletes a customer. It cannot be undone. Also immediately cancels\nany active subscriptions on the customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomer.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomer.out.json"
            }
        },
        "PostChargesChargeCapture": {
            "main": "./lib/actions/action.js",
            "title": "PostChargesChargeCapture",
            "description": "Capture the payment of an existing, uncaptured, charge. This is the second half\nof the two-step payment flow, where first you created a charge with the capture\noption set to false.\n\nUncaptured payments expire a set number of days after they are created (7 by\ndefault [/docs/charges/placing-a-hold]). If they are not captured by that point\nin time, they will be marked as refunded and will no longer be capturable.",
            "callParams": {
                "pathName": "/v1/charges/{charge}/capture",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostChargesChargeCapture.in.json",
                "out": "./lib/schemas/PostChargesChargeCapture.out.json"
            }
        },
        "PostCustomersCustomerBalanceTransactions": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerBalanceTransactions",
            "description": "Creates an immutable transaction that updates the customer's credit balance\n[/docs/billing/customer/balance].",
            "callParams": {
                "pathName": "/v1/customers/{customer}/balance_transactions",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerBalanceTransactions.in.json",
                "out": "./lib/schemas/PostCustomersCustomerBalanceTransactions.out.json"
            }
        },
        "GetCountrySpecsCountry": {
            "main": "./lib/actions/action.js",
            "title": "GetCountrySpecsCountry",
            "description": "Returns a Country Spec for a given Country code.",
            "callParams": {
                "pathName": "/v1/country_specs/{country}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCountrySpecsCountry.in.json",
                "out": "./lib/schemas/GetCountrySpecsCountry.out.json"
            }
        },
        "GetCustomersCustomerBalanceTransactionsTransaction": {
            "main": "./lib/actions/action.js",
            "title": "GetCustomersCustomerBalanceTransactionsTransaction",
            "description": "Retrieves a specific customer balance transaction that updated the customer's \nbalances [/docs/billing/customer/balance].",
            "callParams": {
                "pathName": "/v1/customers/{customer}/balance_transactions/{transaction}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerBalanceTransactionsTransaction.in.json",
                "out": "./lib/schemas/GetCustomersCustomerBalanceTransactionsTransaction.out.json"
            }
        },
        "PostChargesChargeRefund": {
            "main": "./lib/actions/action.js",
            "title": "PostChargesChargeRefund",
            "description": "When you create a new refund, you must specify a Charge or a PaymentIntent\nobject on which to create it.\n\nCreating a new refund will refund a charge that has previously been created but\nnot yet refunded. Funds will be refunded to the credit or debit card that was\noriginally charged.\n\nYou can optionally refund only part of a charge. You can do so multiple times,\nuntil the entire charge has been refunded.\n\nOnce entirely refunded, a charge can't be refunded again. This method will raise\nan error when called on an already-refunded charge, or when trying to refund\nmore money than is left on a charge.",
            "callParams": {
                "pathName": "/v1/charges/{charge}/refund",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostChargesChargeRefund.in.json",
                "out": "./lib/schemas/PostChargesChargeRefund.out.json"
            }
        },
        "GetCustomersCustomerBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "GetCustomersCustomerBankAccountsId",
            "description": "By default, you can see the 10 most recent sources stored on a Customer directly\non the object, but you can also retrieve details about a specific bank account\nstored on the Stripe account.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/bank_accounts/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerBankAccountsId.in.json",
                "out": "./lib/schemas/GetCustomersCustomerBankAccountsId.out.json"
            }
        },
        "PostChargesChargeRefundsRefund": {
            "main": "./lib/actions/action.js",
            "title": "PostChargesChargeRefundsRefund",
            "description": "Update a specified refund.",
            "callParams": {
                "pathName": "/v1/charges/{charge}/refunds/{refund}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostChargesChargeRefundsRefund.in.json",
                "out": "./lib/schemas/PostChargesChargeRefundsRefund.out.json"
            }
        },
        "PostCustomersCustomerBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerBankAccountsId",
            "description": "Update a specified source for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/bank_accounts/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerBankAccountsId.in.json",
                "out": "./lib/schemas/PostCustomersCustomerBankAccountsId.out.json"
            }
        },
        "PostCustomersCustomerBankAccountsIdVerify": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerBankAccountsIdVerify",
            "description": "Verify a specified bank account for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/bank_accounts/{id}/verify",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerBankAccountsIdVerify.in.json",
                "out": "./lib/schemas/PostCustomersCustomerBankAccountsIdVerify.out.json"
            }
        },
        "DeleteCustomersCustomerCardsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomerCardsId",
            "description": "Delete a specified source for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/cards/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomerCardsId.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomerCardsId.out.json"
            }
        },
        "PostCreditNotesIdVoid": {
            "main": "./lib/actions/action.js",
            "title": "PostCreditNotesIdVoid",
            "description": "Marks a credit note as void. Learn more about voiding credit notes\n[/docs/billing/invoices/credit-notes#voiding].",
            "callParams": {
                "pathName": "/v1/credit_notes/{id}/void",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCreditNotesIdVoid.in.json",
                "out": "./lib/schemas/PostCreditNotesIdVoid.out.json"
            }
        },
        "GetCustomersCustomerCardsId": {
            "main": "./lib/actions/action.js",
            "title": "GetCustomersCustomerCardsId",
            "description": "You can always see the 10 most recent cards directly on a customer; this method\nlets you retrieve details about a specific card stored on the customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/cards/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerCardsId.in.json",
                "out": "./lib/schemas/GetCustomersCustomerCardsId.out.json"
            }
        },
        "PostCustomersCustomerSources": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerSources",
            "description": "When you create a new credit card, you must specify a customer or recipient on\nwhich to create it.\n\nIf the card's owner has no default card, then the new card will become the\ndefault. However, if the owner already has a default, then it will not change.\nTo change the default, you should update the customer\n[/docs/api#update_customer] to have a new default_source.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/sources",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerSources.in.json",
                "out": "./lib/schemas/PostCustomersCustomerSources.out.json"
            }
        },
        "GetCustomersCustomerSourcesId": {
            "main": "./lib/actions/action.js",
            "title": "GetCustomersCustomerSourcesId",
            "description": "Retrieve a specified source for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/sources/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerSourcesId.in.json",
                "out": "./lib/schemas/GetCustomersCustomerSourcesId.out.json"
            }
        },
        "PostCustomersCustomerCardsId": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerCardsId",
            "description": "Update a specified source for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/cards/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerCardsId.in.json",
                "out": "./lib/schemas/PostCustomersCustomerCardsId.out.json"
            }
        },
        "PostCustomersCustomerCards": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerCards",
            "description": "When you create a new credit card, you must specify a customer or recipient on\nwhich to create it.\n\nIf the card's owner has no default card, then the new card will become the\ndefault. However, if the owner already has a default, then it will not change.\nTo change the default, you should update the customer\n[/docs/api#update_customer] to have a new default_source.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/cards",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerCards.in.json",
                "out": "./lib/schemas/PostCustomersCustomerCards.out.json"
            }
        },
        "PostCustomersCustomerFundingInstructions": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerFundingInstructions",
            "description": "Retrieve funding instructions for a customer cash balance. If funding\ninstructions do not yet exist for the customer, new funding instructions will be\ncreated. If funding instructions have already been created for a given customer,\nthe same funding instructions will be retrieved. In other words, we will return\nthe same funding instructions each time.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/funding_instructions",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerFundingInstructions.in.json",
                "out": "./lib/schemas/PostCustomersCustomerFundingInstructions.out.json"
            }
        },
        "PostCustomersCustomer": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomer",
            "description": "Updates the specified customer by setting the values of the parameters passed.\nAny parameters not provided will be left unchanged. For example, if you pass the \nsource parameter, that becomes the customer's active source (e.g., a card) to be\nused for all charges in the future. When you update a customer to a new valid\ncard source by passing the source parameter: for each of the customer's current\nsubscriptions, if the subscription bills automatically and is in the past_due \nstate, then the latest open invoice for the subscription with automatic\ncollection enabled will be retried. This retry will not count as an automatic\nretry, and will not affect the next regularly scheduled payment for the invoice.\nChanging the default_source for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.",
            "callParams": {
                "pathName": "/v1/customers/{customer}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomer.in.json",
                "out": "./lib/schemas/PostCustomersCustomer.out.json"
            }
        },
        "PostCustomersCustomerSourcesId": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerSourcesId",
            "description": "Update a specified source for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/sources/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerSourcesId.in.json",
                "out": "./lib/schemas/PostCustomersCustomerSourcesId.out.json"
            }
        },
        "DeleteCustomersCustomerSourcesId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomerSourcesId",
            "description": "Delete a specified source for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/sources/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomerSourcesId.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomerSourcesId.out.json"
            }
        },
        "GetCustomersCustomerSubscriptionsSubscriptionExposedId": {
            "main": "./lib/actions/action.js",
            "title": "GetCustomersCustomerSubscriptionsSubscriptionExposedId",
            "description": "Retrieves the subscription with the given ID.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerSubscriptionsSubscriptionExposedId.in.json",
                "out": "./lib/schemas/GetCustomersCustomerSubscriptionsSubscriptionExposedId.out.json"
            }
        },
        "PostCustomersCustomerSubscriptions": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerSubscriptions",
            "description": "Creates a new subscription on an existing customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/subscriptions",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerSubscriptions.in.json",
                "out": "./lib/schemas/PostCustomersCustomerSubscriptions.out.json"
            }
        },
        "PostCustomersCustomerSourcesIdVerify": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerSourcesIdVerify",
            "description": "Verify a specified bank account for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/sources/{id}/verify",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerSourcesIdVerify.in.json",
                "out": "./lib/schemas/PostCustomersCustomerSourcesIdVerify.out.json"
            }
        },
        "DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount",
            "description": "Removes the currently applied discount on a customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount.out.json"
            }
        },
        "DeleteCustomersCustomerSubscriptionsSubscriptionExposedId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomerSubscriptionsSubscriptionExposedId",
            "description": "Cancels a customer's subscription. If you set the at_period_end parameter to \ntrue, the subscription will remain active until the end of the period, at which\npoint it will be canceled and not renewed. Otherwise, with the default false \nvalue, the subscription is terminated immediately. In either case, the customer\nwill not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you've created will still be\ncharged for at the end of the period, unless manually deleted. If you've set the\nsubscription to cancel at the end of the period, any pending prorations will\nalso be left in place and collected at the end of the period. But if the\nsubscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic\ncollection of all finalized invoices for the customer. This is intended to\nprevent unexpected payment attempts after the customer has canceled a\nsubscription. However, you can resume automatic collection of the invoices\nmanually after subscription cancellation to have us proceed. Or, you could check\nfor unpaid invoices before allowing the customer to cancel the subscription at\nall.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomerSubscriptionsSubscriptionExposedId.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomerSubscriptionsSubscriptionExposedId.out.json"
            }
        },
        "PostCustomersCustomerSubscriptionsSubscriptionExposedId": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerSubscriptionsSubscriptionExposedId",
            "description": "Updates an existing subscription on a customer to match the specified\nparameters. When changing plans or quantities, we will optionally prorate the\nprice we charge next month to make up for any price changes. To preview how the\nproration will be calculated, use the upcoming invoice endpoint.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerSubscriptionsSubscriptionExposedId.in.json",
                "out": "./lib/schemas/PostCustomersCustomerSubscriptionsSubscriptionExposedId.out.json"
            }
        },
        "DeleteCustomersCustomerTaxIdsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomerTaxIdsId",
            "description": "Deletes an existing TaxID object.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/tax_ids/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomerTaxIdsId.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomerTaxIdsId.out.json"
            }
        },
        "PostCustomersCustomerTaxIds": {
            "main": "./lib/actions/action.js",
            "title": "PostCustomersCustomerTaxIds",
            "description": "Creates a new TaxID object for a customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/tax_ids",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCustomersCustomerTaxIds.in.json",
                "out": "./lib/schemas/PostCustomersCustomerTaxIds.out.json"
            }
        },
        "GetDisputesDispute": {
            "main": "./lib/actions/action.js",
            "title": "GetDisputesDispute",
            "description": "Retrieves the dispute with the given ID.",
            "callParams": {
                "pathName": "/v1/disputes/{dispute}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetDisputesDispute.in.json",
                "out": "./lib/schemas/GetDisputesDispute.out.json"
            }
        },
        "GetCustomersCustomerTaxIdsId": {
            "main": "./lib/actions/action.js",
            "title": "GetCustomersCustomerTaxIdsId",
            "description": "Retrieves the TaxID object with the given identifier.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/tax_ids/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetCustomersCustomerTaxIdsId.in.json",
                "out": "./lib/schemas/GetCustomersCustomerTaxIdsId.out.json"
            }
        },
        "PostDisputesDispute": {
            "main": "./lib/actions/action.js",
            "title": "PostDisputesDispute",
            "description": "When you get a dispute, contacting your customer is always the best first step.\nIf that doesn't work, you can submit evidence to help us resolve the dispute in\nyour favor. You can do this in your dashboard\n[https://dashboard.stripe.com/disputes], but if you prefer, you can use the API\nto submit evidence programmatically.\n\nDepending on your dispute type, different evidence fields will give you a better\nchance of winning your dispute. To figure out which evidence fields to provide,\nsee our guide to dispute types [/docs/disputes/categories].",
            "callParams": {
                "pathName": "/v1/disputes/{dispute}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostDisputesDispute.in.json",
                "out": "./lib/schemas/PostDisputesDispute.out.json"
            }
        },
        "PostDisputesDisputeClose": {
            "main": "./lib/actions/action.js",
            "title": "PostDisputesDisputeClose",
            "description": "Closing the dispute for a charge indicates that you do not have any evidence to\nsubmit and are essentially dismissing the dispute, acknowledging it as lost.\n\nThe status of the dispute will change from needs_response to lost. Closing a\ndispute is irreversible.",
            "callParams": {
                "pathName": "/v1/disputes/{dispute}/close",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostDisputesDisputeClose.in.json",
                "out": "./lib/schemas/PostDisputesDisputeClose.out.json"
            }
        },
        "GetEventsId": {
            "main": "./lib/actions/action.js",
            "title": "GetEventsId",
            "description": "Retrieves the details of an event. Supply the unique identifier of the event,\nwhich you might have received in a webhook.",
            "callParams": {
                "pathName": "/v1/events/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetEventsId.in.json",
                "out": "./lib/schemas/GetEventsId.out.json"
            }
        },
        "DeleteEphemeralKeysKey": {
            "main": "./lib/actions/action.js",
            "title": "DeleteEphemeralKeysKey",
            "description": "Invalidates a short-lived API key for a given resource.",
            "callParams": {
                "pathName": "/v1/ephemeral_keys/{key}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteEphemeralKeysKey.in.json",
                "out": "./lib/schemas/DeleteEphemeralKeysKey.out.json"
            }
        },
        "PostEphemeralKeys": {
            "main": "./lib/actions/action.js",
            "title": "PostEphemeralKeys",
            "description": "Creates a short-lived API key for a given resource.",
            "callParams": {
                "pathName": "/v1/ephemeral_keys",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostEphemeralKeys.in.json",
                "out": "./lib/schemas/PostEphemeralKeys.out.json"
            }
        },
        "GetExchangeRatesRateId": {
            "main": "./lib/actions/action.js",
            "title": "GetExchangeRatesRateId",
            "description": "Retrieves the exchange rates from the given currency to every supported\ncurrency.",
            "callParams": {
                "pathName": "/v1/exchange_rates/{rate_id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetExchangeRatesRateId.in.json",
                "out": "./lib/schemas/GetExchangeRatesRateId.out.json"
            }
        },
        "PostFileLinks": {
            "main": "./lib/actions/action.js",
            "title": "PostFileLinks",
            "description": "Creates a new file link object.",
            "callParams": {
                "pathName": "/v1/file_links",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostFileLinks.in.json",
                "out": "./lib/schemas/PostFileLinks.out.json"
            }
        },
        "PostFiles": {
            "main": "./lib/actions/action.js",
            "title": "PostFiles",
            "description": "To upload a file to Stripe, you'll need to send a request of type \nmultipart/form-data. The request should contain the file you would like to\nupload, as well as the parameters for creating a file.\n\nAll of Stripe's officially supported Client libraries should have support for\nsending multipart/form-data.",
            "callParams": {
                "pathName": "/v1/files",
                "method": "post",
                "requestContentType": "multipart/form-data"
            },
            "metadata": {
                "in": "./lib/schemas/PostFiles.in.json",
                "out": "./lib/schemas/PostFiles.out.json"
            }
        },
        "DeleteCustomersCustomerBankAccountsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomerBankAccountsId",
            "description": "Delete a specified source for a given customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/bank_accounts/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomerBankAccountsId.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomerBankAccountsId.out.json"
            }
        },
        "GetIdentityVerificationReportsReport": {
            "main": "./lib/actions/action.js",
            "title": "GetIdentityVerificationReportsReport",
            "description": "Retrieves an existing VerificationReport",
            "callParams": {
                "pathName": "/v1/identity/verification_reports/{report}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIdentityVerificationReportsReport.in.json",
                "out": "./lib/schemas/GetIdentityVerificationReportsReport.out.json"
            }
        },
        "GetFilesFile": {
            "main": "./lib/actions/action.js",
            "title": "GetFilesFile",
            "description": "Retrieves the details of an existing file object. Supply the unique file ID from\na file, and Stripe will return the corresponding file object. To access file\ncontents, see the File Upload Guide [/docs/file-upload#download-file-contents].",
            "callParams": {
                "pathName": "/v1/files/{file}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetFilesFile.in.json",
                "out": "./lib/schemas/GetFilesFile.out.json"
            }
        },
        "PostIdentityVerificationSessionsSession": {
            "main": "./lib/actions/action.js",
            "title": "PostIdentityVerificationSessionsSession",
            "description": "Updates a VerificationSession object.\n\nWhen the session status is requires_input, you can use this method to update the\nverification check and options.",
            "callParams": {
                "pathName": "/v1/identity/verification_sessions/{session}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIdentityVerificationSessionsSession.in.json",
                "out": "./lib/schemas/PostIdentityVerificationSessionsSession.out.json"
            }
        },
        "GetIdentityVerificationSessionsSession": {
            "main": "./lib/actions/action.js",
            "title": "GetIdentityVerificationSessionsSession",
            "description": "Retrieves the details of a VerificationSession that was previously created.\n\nWhen the session status is requires_input, you can use this method to retrieve a\nvalidclient_secret or url to allow re-submission.",
            "callParams": {
                "pathName": "/v1/identity/verification_sessions/{session}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIdentityVerificationSessionsSession.in.json",
                "out": "./lib/schemas/GetIdentityVerificationSessionsSession.out.json"
            }
        },
        "PostIdentityVerificationSessions": {
            "main": "./lib/actions/action.js",
            "title": "PostIdentityVerificationSessions",
            "description": "Creates a VerificationSession object.\n\nAfter the VerificationSession is created, display a verification modal using the\nsession client_secret or send your users to the session's url.\n\nIf your API key is in test mode, verification checks won't actually process,\nthough everything else will occur as if in live mode.\n\nRelated guide: Verify your users' identity documents\n[/docs/identity/verify-identity-documents].",
            "callParams": {
                "pathName": "/v1/identity/verification_sessions",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIdentityVerificationSessions.in.json",
                "out": "./lib/schemas/PostIdentityVerificationSessions.out.json"
            }
        },
        "DeleteCustomersCustomerDiscount": {
            "main": "./lib/actions/action.js",
            "title": "DeleteCustomersCustomerDiscount",
            "description": "Removes the currently applied discount on a customer.",
            "callParams": {
                "pathName": "/v1/customers/{customer}/discount",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomersCustomerDiscount.in.json",
                "out": "./lib/schemas/DeleteCustomersCustomerDiscount.out.json"
            }
        },
        "PostInvoiceitemsInvoiceitem": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoiceitemsInvoiceitem",
            "description": "Updates the amount or description of an invoice item on an upcoming invoice.\nUpdating an invoice item is only possible before the invoice it's attached to is\nclosed.",
            "callParams": {
                "pathName": "/v1/invoiceitems/{invoiceitem}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoiceitemsInvoiceitem.in.json",
                "out": "./lib/schemas/PostInvoiceitemsInvoiceitem.out.json"
            }
        },
        "GetFileLinksLink": {
            "main": "./lib/actions/action.js",
            "title": "GetFileLinksLink",
            "description": "Retrieves the file link with the given ID.",
            "callParams": {
                "pathName": "/v1/file_links/{link}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetFileLinksLink.in.json",
                "out": "./lib/schemas/GetFileLinksLink.out.json"
            }
        },
        "PostIdentityVerificationSessionsSessionRedact": {
            "main": "./lib/actions/action.js",
            "title": "PostIdentityVerificationSessionsSessionRedact",
            "description": "Redact a VerificationSession to remove all collected information from Stripe.\nThis will redact the VerificationSession and all objects related to it,\nincluding VerificationReports, Events, request logs, etc.\n\nA VerificationSession object can be redacted when it is in requires_input or \nverifiedstatus [/docs/identity/how-sessions-work]. Redacting a\nVerificationSession in requires_actionstate will automatically cancel it.\n\nThe redaction process may take up to four days. When the redaction process is in\nprogress, the VerificationSession's redaction.status field will be set to \nprocessing; when the process is finished, it will change to redacted and an \nidentity.verification_session.redacted event will be emitted.\n\nRedaction is irreversible. Redacted objects are still accessible in the Stripe\nAPI, but all the fields that contain personal data will be replaced by the\nstring [redacted] or a similar placeholder. The metadata field will also be\nerased. Redacted objects cannot be updated or used for any purpose.\n\nLearn more [/docs/identity/verification-sessions#redact].",
            "callParams": {
                "pathName": "/v1/identity/verification_sessions/{session}/redact",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIdentityVerificationSessionsSessionRedact.in.json",
                "out": "./lib/schemas/PostIdentityVerificationSessionsSessionRedact.out.json"
            }
        },
        "PostInvoiceitems": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoiceitems",
            "description": "Creates an item to be added to a draft invoice (up to 250 items per invoice). If\nno invoice is specified, the item will be on the next invoice created for the\ncustomer specified.",
            "callParams": {
                "pathName": "/v1/invoiceitems",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoiceitems.in.json",
                "out": "./lib/schemas/PostInvoiceitems.out.json"
            }
        },
        "GetInvoiceitemsInvoiceitem": {
            "main": "./lib/actions/action.js",
            "title": "GetInvoiceitemsInvoiceitem",
            "description": "Retrieves the invoice item with the given ID.",
            "callParams": {
                "pathName": "/v1/invoiceitems/{invoiceitem}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoiceitemsInvoiceitem.in.json",
                "out": "./lib/schemas/GetInvoiceitemsInvoiceitem.out.json"
            }
        },
        "PostInvoices": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoices",
            "description": "This endpoint creates a draft invoice for a given customer. The draft invoice\ncreated pulls in all pending invoice items on that customer, including\nprorations. The invoice remains a draft until you finalize the invoice, which\nallows you to pay or send the invoice to your customers.",
            "callParams": {
                "pathName": "/v1/invoices",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoices.in.json",
                "out": "./lib/schemas/PostInvoices.out.json"
            }
        },
        "PostInvoicesInvoice": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoicesInvoice",
            "description": "Draft invoices are fully editable. Once an invoice is finalized\n[/docs/billing/invoices/workflow#finalized], monetary values, as well as \ncollection_method, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically\nfinalizing, reattempting payments on, sending reminders for, or automatically\nreconciling [/docs/billing/invoices/reconciliation] invoices, pass\nauto_advance=false.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoicesInvoice.in.json",
                "out": "./lib/schemas/PostInvoicesInvoice.out.json"
            }
        },
        "DeleteInvoicesInvoice": {
            "main": "./lib/actions/action.js",
            "title": "DeleteInvoicesInvoice",
            "description": "Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to\ndelete invoices that are no longer in a draft state will fail; once an invoice\nhas been finalized or if an invoice is for a subscription, it must be voided.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteInvoicesInvoice.in.json",
                "out": "./lib/schemas/DeleteInvoicesInvoice.out.json"
            }
        },
        "DeleteInvoiceitemsInvoiceitem": {
            "main": "./lib/actions/action.js",
            "title": "DeleteInvoiceitemsInvoiceitem",
            "description": "Deletes an invoice item, removing it from an invoice. Deleting invoice items is\nonly possible when they're not attached to invoices, or if it's attached to a\ndraft invoice.",
            "callParams": {
                "pathName": "/v1/invoiceitems/{invoiceitem}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteInvoiceitemsInvoiceitem.in.json",
                "out": "./lib/schemas/DeleteInvoiceitemsInvoiceitem.out.json"
            }
        },
        "PostInvoicesInvoiceMarkUncollectible": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoicesInvoiceMarkUncollectible",
            "description": "Marking an invoice as uncollectible is useful for keeping track of bad debts\nthat can be written off for accounting purposes.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}/mark_uncollectible",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoicesInvoiceMarkUncollectible.in.json",
                "out": "./lib/schemas/PostInvoicesInvoiceMarkUncollectible.out.json"
            }
        },
        "PostInvoicesInvoiceSend": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoicesInvoiceSend",
            "description": "Stripe will automatically send invoices to customers according to your \nsubscriptions settings [https://dashboard.stripe.com/account/billing/automatic].\nHowever, if you'd like to manually send an invoice to your customer out of the\nnormal schedule, you can do so. When sending invoices that have already been\npaid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an \ninvoice.sent event.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}/send",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoicesInvoiceSend.in.json",
                "out": "./lib/schemas/PostInvoicesInvoiceSend.out.json"
            }
        },
        "PostInvoicesInvoiceFinalize": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoicesInvoiceFinalize",
            "description": "Stripe automatically finalizes drafts before sending and attempting payment on\ninvoices. However, if you'd like to finalize a draft invoice manually, you can\ndo so using this method.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}/finalize",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoicesInvoiceFinalize.in.json",
                "out": "./lib/schemas/PostInvoicesInvoiceFinalize.out.json"
            }
        },
        "PostInvoicesInvoicePay": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoicesInvoicePay",
            "description": "Stripe automatically creates and then attempts to collect payment on invoices\nfor customers on subscriptions according to your subscriptions settings\n[https://dashboard.stripe.com/account/billing/automatic]. However, if you'd like\nto attempt payment on an invoice out of the normal collection schedule or for\nsome other reason, you can do so.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}/pay",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoicesInvoicePay.in.json",
                "out": "./lib/schemas/PostInvoicesInvoicePay.out.json"
            }
        },
        "PostInvoicesInvoiceVoid": {
            "main": "./lib/actions/action.js",
            "title": "PostInvoicesInvoiceVoid",
            "description": "Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is\nsimilar to deletion, however it only applies to finalized invoices and maintains\na papertrail where the invoice can still be found.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}/void",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostInvoicesInvoiceVoid.in.json",
                "out": "./lib/schemas/PostInvoicesInvoiceVoid.out.json"
            }
        },
        "PostIssuingAuthorizationsAuthorizationApprove": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingAuthorizationsAuthorizationApprove",
            "description": "Approves a pending Issuing Authorization object. This request should be made\nwithin the timeout window of the real-time authorization\n[/docs/issuing/controls/real-time-authorizations] flow.",
            "callParams": {
                "pathName": "/v1/issuing/authorizations/{authorization}/approve",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingAuthorizationsAuthorizationApprove.in.json",
                "out": "./lib/schemas/PostIssuingAuthorizationsAuthorizationApprove.out.json"
            }
        },
        "PostCheckoutSessionsSessionExpire": {
            "main": "./lib/actions/action.js",
            "title": "PostCheckoutSessionsSessionExpire",
            "description": "A Session can be expired when it is in one of these statuses: open \n\nAfter it expires, a customer can't complete a Session and customers loading the\nSession see a message saying the Session is expired.",
            "callParams": {
                "pathName": "/v1/checkout/sessions/{session}/expire",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostCheckoutSessionsSessionExpire.in.json",
                "out": "./lib/schemas/PostCheckoutSessionsSessionExpire.out.json"
            }
        },
        "PostIssuingAuthorizationsAuthorizationDecline": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingAuthorizationsAuthorizationDecline",
            "description": "Declines a pending Issuing Authorization object. This request should be made\nwithin the timeout window of the real time authorization\n[/docs/issuing/controls/real-time-authorizations] flow.",
            "callParams": {
                "pathName": "/v1/issuing/authorizations/{authorization}/decline",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingAuthorizationsAuthorizationDecline.in.json",
                "out": "./lib/schemas/PostIssuingAuthorizationsAuthorizationDecline.out.json"
            }
        },
        "PostIssuingCardholders": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingCardholders",
            "description": "Creates a new Issuing Cardholder object that can be issued cards.",
            "callParams": {
                "pathName": "/v1/issuing/cardholders",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingCardholders.in.json",
                "out": "./lib/schemas/PostIssuingCardholders.out.json"
            }
        },
        "PostIssuingAuthorizationsAuthorization": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingAuthorizationsAuthorization",
            "description": "Updates the specified Issuing Authorization object by setting the values of the\nparameters passed. Any parameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/issuing/authorizations/{authorization}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingAuthorizationsAuthorization.in.json",
                "out": "./lib/schemas/PostIssuingAuthorizationsAuthorization.out.json"
            }
        },
        "PostIssuingCardholdersCardholder": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingCardholdersCardholder",
            "description": "Updates the specified Issuing Cardholder object by setting the values of the\nparameters passed. Any parameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/issuing/cardholders/{cardholder}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingCardholdersCardholder.in.json",
                "out": "./lib/schemas/PostIssuingCardholdersCardholder.out.json"
            }
        },
        "PostIssuingCards": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingCards",
            "description": "Creates an Issuing Card object.",
            "callParams": {
                "pathName": "/v1/issuing/cards",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingCards.in.json",
                "out": "./lib/schemas/PostIssuingCards.out.json"
            }
        },
        "PostIssuingCardsCard": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingCardsCard",
            "description": "Updates the specified Issuing Card object by setting the values of the\nparameters passed. Any parameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/issuing/cards/{card}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingCardsCard.in.json",
                "out": "./lib/schemas/PostIssuingCardsCard.out.json"
            }
        },
        "PostIssuingDisputesDispute": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingDisputesDispute",
            "description": "Updates the specified Issuing Dispute object by setting the values of the\nparameters passed. Any parameters not provided will be left unchanged.\nProperties on the evidence object can be unset by passing in an empty string.",
            "callParams": {
                "pathName": "/v1/issuing/disputes/{dispute}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingDisputesDispute.in.json",
                "out": "./lib/schemas/PostIssuingDisputesDispute.out.json"
            }
        },
        "PostIssuingDisputes": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingDisputes",
            "description": "Creates an Issuing Dispute object. Individual pieces of evidence within the \nevidence object are optional at this point. Stripe only validates that required\nevidence is present during submission. Refer to Dispute reasons and evidence\n[/docs/issuing/purchases/disputes#dispute-reasons-and-evidence] for more details\nabout evidence requirements.",
            "callParams": {
                "pathName": "/v1/issuing/disputes",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingDisputes.in.json",
                "out": "./lib/schemas/PostIssuingDisputes.out.json"
            }
        },
        "PostIssuingDisputesDisputeSubmit": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingDisputesDisputeSubmit",
            "description": "Submits an Issuing Dispute to the card network. Stripe validates that all\nevidence fields required for the dispute's reason are present. For more details,\nsee Dispute reasons and evidence\n[/docs/issuing/purchases/disputes#dispute-reasons-and-evidence].",
            "callParams": {
                "pathName": "/v1/issuing/disputes/{dispute}/submit",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingDisputesDisputeSubmit.in.json",
                "out": "./lib/schemas/PostIssuingDisputesDisputeSubmit.out.json"
            }
        },
        "PostIssuingSettlementsSettlement": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingSettlementsSettlement",
            "description": "Updates the specified Issuing Settlement object by setting the values of the\nparameters passed. Any parameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/issuing/settlements/{settlement}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingSettlementsSettlement.in.json",
                "out": "./lib/schemas/PostIssuingSettlementsSettlement.out.json"
            }
        },
        "GetIssuingCardsCard": {
            "main": "./lib/actions/action.js",
            "title": "GetIssuingCardsCard",
            "description": "Retrieves an Issuing Card object.",
            "callParams": {
                "pathName": "/v1/issuing/cards/{card}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingCardsCard.in.json",
                "out": "./lib/schemas/GetIssuingCardsCard.out.json"
            }
        },
        "GetIssuingSettlementsSettlement": {
            "main": "./lib/actions/action.js",
            "title": "GetIssuingSettlementsSettlement",
            "description": "Retrieves an Issuing Settlement object.",
            "callParams": {
                "pathName": "/v1/issuing/settlements/{settlement}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingSettlementsSettlement.in.json",
                "out": "./lib/schemas/GetIssuingSettlementsSettlement.out.json"
            }
        },
        "GetMandatesMandate": {
            "main": "./lib/actions/action.js",
            "title": "GetMandatesMandate",
            "description": "Retrieves a Mandate object.",
            "callParams": {
                "pathName": "/v1/mandates/{mandate}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetMandatesMandate.in.json",
                "out": "./lib/schemas/GetMandatesMandate.out.json"
            }
        },
        "GetIssuingTransactionsTransaction": {
            "main": "./lib/actions/action.js",
            "title": "GetIssuingTransactionsTransaction",
            "description": "Retrieves an Issuing Transaction object.",
            "callParams": {
                "pathName": "/v1/issuing/transactions/{transaction}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingTransactionsTransaction.in.json",
                "out": "./lib/schemas/GetIssuingTransactionsTransaction.out.json"
            }
        },
        "PostIssuingTransactionsTransaction": {
            "main": "./lib/actions/action.js",
            "title": "PostIssuingTransactionsTransaction",
            "description": "Updates the specified Issuing Transaction object by setting the values of the\nparameters passed. Any parameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/issuing/transactions/{transaction}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIssuingTransactionsTransaction.in.json",
                "out": "./lib/schemas/PostIssuingTransactionsTransaction.out.json"
            }
        },
        "GetOrderReturnsId": {
            "main": "./lib/actions/action.js",
            "title": "GetOrderReturnsId",
            "description": "Retrieves the details of an existing order return. Supply the unique order ID\nfrom either an order return creation request or the order return list, and\nStripe will return the corresponding order information.",
            "callParams": {
                "pathName": "/v1/order_returns/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetOrderReturnsId.in.json",
                "out": "./lib/schemas/GetOrderReturnsId.out.json"
            }
        },
        "GetOrdersId": {
            "main": "./lib/actions/action.js",
            "title": "GetOrdersId",
            "description": "Retrieves the details of an existing order. Supply the unique order ID from\neither an order creation request or the order list, and Stripe will return the\ncorresponding order information.",
            "callParams": {
                "pathName": "/v1/orders/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetOrdersId.in.json",
                "out": "./lib/schemas/GetOrdersId.out.json"
            }
        },
        "GetInvoicesInvoice": {
            "main": "./lib/actions/action.js",
            "title": "GetInvoicesInvoice",
            "description": "Retrieves the invoice with the given ID.",
            "callParams": {
                "pathName": "/v1/invoices/{invoice}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetInvoicesInvoice.in.json",
                "out": "./lib/schemas/GetInvoicesInvoice.out.json"
            }
        },
        "PostOrdersIdReturns": {
            "main": "./lib/actions/action.js",
            "title": "PostOrdersIdReturns",
            "description": "Return all or part of an order. The order must have a status of paid or \nfulfilled before it can be returned. Once all items have been returned, the\norder will become canceled or returned depending on which status the order\nstarted in.",
            "callParams": {
                "pathName": "/v1/orders/{id}/returns",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostOrdersIdReturns.in.json",
                "out": "./lib/schemas/PostOrdersIdReturns.out.json"
            }
        },
        "PostOrdersId": {
            "main": "./lib/actions/action.js",
            "title": "PostOrdersId",
            "description": "Updates the specific order by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/orders/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostOrdersId.in.json",
                "out": "./lib/schemas/PostOrdersId.out.json"
            }
        },
        "PostOrdersIdPay": {
            "main": "./lib/actions/action.js",
            "title": "PostOrdersIdPay",
            "description": "Pay an order by providing a source to create a payment.",
            "callParams": {
                "pathName": "/v1/orders/{id}/pay",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostOrdersIdPay.in.json",
                "out": "./lib/schemas/PostOrdersIdPay.out.json"
            }
        },
        "PostOrders": {
            "main": "./lib/actions/action.js",
            "title": "PostOrders",
            "description": "Creates a new order object.",
            "callParams": {
                "pathName": "/v1/orders",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostOrders.in.json",
                "out": "./lib/schemas/PostOrders.out.json"
            }
        },
        "GetIssuerFraudRecordsIssuerFraudRecord": {
            "main": "./lib/actions/action.js",
            "title": "GetIssuerFraudRecordsIssuerFraudRecord",
            "description": "Retrieves the details of an issuer fraud record that has previously been\ncreated. \n\nPlease refer to the issuer fraud record object reference for more details.",
            "callParams": {
                "pathName": "/v1/issuer_fraud_records/{issuer_fraud_record}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuerFraudRecordsIssuerFraudRecord.in.json",
                "out": "./lib/schemas/GetIssuerFraudRecordsIssuerFraudRecord.out.json"
            }
        },
        "PostPaymentIntents": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntents",
            "description": "Creates a PaymentIntent object.\n\nAfter the PaymentIntent is created, attach a payment method and confirm\n[/docs/api/payment_intents/confirm]to continue the payment. You can read more\nabout the different payment flows available via the Payment Intents API here\n[/docs/payments/payment-intents].\n\nWhen confirm=true is used during creation, it is equivalent to creating and\nconfirming the PaymentIntent in the same call. You may use any parameters\navailable in the confirm API [/docs/api/payment_intents/confirm] when \nconfirm=trueis supplied.",
            "callParams": {
                "pathName": "/v1/payment_intents",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntents.in.json",
                "out": "./lib/schemas/PostPaymentIntents.out.json"
            }
        },
        "PostPaymentIntentsIntentCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntentsIntentCancel",
            "description": "A PaymentIntent object can be canceled when it is in one of these statuses: \nrequires_payment_method, requires_capture, requires_confirmation, \nrequires_action, or processing. \n\nOnce canceled, no additional charges will be made by the PaymentIntent and any\noperations on the PaymentIntent will fail with an error. For PaymentIntents with \nstatus='requires_capture', the remaining amount_capturable will automatically be\nrefunded. \n\nYou cannot cancel the PaymentIntent for a Checkout Session. Expire the Checkout\nSession [/docs/api/checkout/sessions/expire] instead",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntentsIntentCancel.in.json",
                "out": "./lib/schemas/PostPaymentIntentsIntentCancel.out.json"
            }
        },
        "PostIdentityVerificationSessionsSessionCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostIdentityVerificationSessionsSessionCancel",
            "description": "A VerificationSession object can be canceled when it is in requires_input status\n[/docs/identity/how-sessions-work].\n\nOnce canceled, future submission attempts are disabled. This cannot be undone. \nLearn more [/docs/identity/verification-sessions#cancel].",
            "callParams": {
                "pathName": "/v1/identity/verification_sessions/{session}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostIdentityVerificationSessionsSessionCancel.in.json",
                "out": "./lib/schemas/PostIdentityVerificationSessionsSessionCancel.out.json"
            }
        },
        "GetIssuingCardholdersCardholder": {
            "main": "./lib/actions/action.js",
            "title": "GetIssuingCardholdersCardholder",
            "description": "Retrieves an Issuing Cardholder object.",
            "callParams": {
                "pathName": "/v1/issuing/cardholders/{cardholder}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingCardholdersCardholder.in.json",
                "out": "./lib/schemas/GetIssuingCardholdersCardholder.out.json"
            }
        },
        "PostPaymentIntentsIntentCapture": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntentsIntentCapture",
            "description": "Capture the funds of an existing uncaptured PaymentIntent when its status is \nrequires_capture.\n\nUncaptured PaymentIntents will be canceled a set number of days after they are\ncreated (7 by default).\n\nLearn more about separate authorization and capture\n[/docs/payments/capture-later].",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}/capture",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntentsIntentCapture.in.json",
                "out": "./lib/schemas/PostPaymentIntentsIntentCapture.out.json"
            }
        },
        "GetPaymentIntentsIntent": {
            "main": "./lib/actions/action.js",
            "title": "GetPaymentIntentsIntent",
            "description": "Retrieves the details of a PaymentIntent that has previously been created. \n\nClient-side retrieval using a publishable key is allowed when the client_secret \nis provided in the query string. \n\nWhen retrieved with a publishable key, only a subset of properties will be\nreturned. Please refer to the payment intent object reference for more details.",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentIntentsIntent.in.json",
                "out": "./lib/schemas/GetPaymentIntentsIntent.out.json"
            }
        },
        "PostPaymentIntentsIntentVerifyMicrodeposits": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntentsIntentVerifyMicrodeposits",
            "description": "Verifies microdeposits on a PaymentIntent object.",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}/verify_microdeposits",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntentsIntentVerifyMicrodeposits.in.json",
                "out": "./lib/schemas/PostPaymentIntentsIntentVerifyMicrodeposits.out.json"
            }
        },
        "PostPaymentLinks": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentLinks",
            "description": "Creates a payment link.",
            "callParams": {
                "pathName": "/v1/payment_links",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentLinks.in.json",
                "out": "./lib/schemas/PostPaymentLinks.out.json"
            }
        },
        "GetPaymentLinksPaymentLink": {
            "main": "./lib/actions/action.js",
            "title": "GetPaymentLinksPaymentLink",
            "description": "Retrieve a payment link.",
            "callParams": {
                "pathName": "/v1/payment_links/{payment_link}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentLinksPaymentLink.in.json",
                "out": "./lib/schemas/GetPaymentLinksPaymentLink.out.json"
            }
        },
        "PostPaymentMethodsPaymentMethod": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentMethodsPaymentMethod",
            "description": "Updates a PaymentMethod object. A PaymentMethod must be attached a customer to\nbe updated.",
            "callParams": {
                "pathName": "/v1/payment_methods/{payment_method}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentMethodsPaymentMethod.in.json",
                "out": "./lib/schemas/PostPaymentMethodsPaymentMethod.out.json"
            }
        },
        "GetPaymentMethodsPaymentMethod": {
            "main": "./lib/actions/action.js",
            "title": "GetPaymentMethodsPaymentMethod",
            "description": "Retrieves a PaymentMethod object.",
            "callParams": {
                "pathName": "/v1/payment_methods/{payment_method}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPaymentMethodsPaymentMethod.in.json",
                "out": "./lib/schemas/GetPaymentMethodsPaymentMethod.out.json"
            }
        },
        "PostPaymentMethods": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentMethods",
            "description": "Creates a PaymentMethod object. Read the Stripe.js reference\n[/docs/stripe-js/reference#stripe-create-payment-method] to learn how to create\nPaymentMethods via Stripe.js.\n\nInstead of creating a PaymentMethod directly, we recommend using the \nPaymentIntents [/docs/payments/accept-a-payment] API to accept a payment\nimmediately or the SetupIntent [/docs/payments/save-and-reuse] API to collect\npayment method details ahead of a future payment.",
            "callParams": {
                "pathName": "/v1/payment_methods",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentMethods.in.json",
                "out": "./lib/schemas/PostPaymentMethods.out.json"
            }
        },
        "PostPaymentIntentsIntentIncrementAuthorization": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntentsIntentIncrementAuthorization",
            "description": "Perform an incremental authorization on an eligiblePaymentIntent\n[/docs/api/payment_intents/object]. To be eligible, the PaymentIntent's status\nmust be requires_capture andincremental_authorization_supported\n[/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported]\nmust be true.\n\nIncremental authorizations attempt to increase the authorized amount on your\ncustomer's card to the new, higher amount provided. As with the initial\nauthorization, incremental authorizations may be declined. A single\nPaymentIntent can call this endpoint multiple times to further increase the\nauthorized amount.\n\nIf the incremental authorization succeeds, the PaymentIntent object is returned\nwith the updatedamount\n[/docs/api/payment_intents/object#payment_intent_object-amount]. If the\nincremental authorization fails, acard_declined\n[/docs/error-codes#card-declined] error is returned, and no fields on the\nPaymentIntent or Charge are updated. The PaymentIntent object remains capturable\nfor the previously authorized amount.\n\nEach PaymentIntent can have a maximum of 10 incremental authorization attempts,\nincluding declines. Once captured, a PaymentIntent can no longer be incremented.\n\nLearn more about incremental authorizations\n[/docs/terminal/features/incremental-authorizations].",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}/increment_authorization",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntentsIntentIncrementAuthorization.in.json",
                "out": "./lib/schemas/PostPaymentIntentsIntentIncrementAuthorization.out.json"
            }
        },
        "PostPaymentIntentsIntentApplyCustomerBalance": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntentsIntentApplyCustomerBalance",
            "description": "Manually reconcile the remaining amount for a customer_balance PaymentIntent.\n\nThis can be used when the cash balance for a customer in manual reconciliation\nmode [docs/payments/customer-balance/reconciliation#cash-manual-reconciliation] \nreceived funds.",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}/apply_customer_balance",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntentsIntentApplyCustomerBalance.in.json",
                "out": "./lib/schemas/PostPaymentIntentsIntentApplyCustomerBalance.out.json"
            }
        },
        "PostPaymentIntentsIntentConfirm": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntentsIntentConfirm",
            "description": "Confirm that your customer intends to pay with current or provided payment\nmethod. Upon confirmation, the PaymentIntent will attempt to initiate a payment.\n\nIf the selected payment method requires additional authentication steps, the\nPaymentIntent will transition to the requires_action status and suggest\nadditional actions via next_action. If payment fails, the PaymentIntent will\ntransition to the requires_payment_method status. If payment succeeds, the\nPaymentIntent will transition to the succeededstatus (or requires_capture, if \ncapture_method is set to manual).\n\nIf the confirmation_method is automatic, payment may be attempted using our \nclient SDKs [/docs/stripe-js/reference#stripe-handle-card-payment]and the\nPaymentIntent's client_secret. After next_actions are handled by the client, no\nadditional confirmation is required to complete the payment.\n\nIf the confirmation_method is manual, all payment attempts must be initiated\nusing a secret key. If any actions are required for the payment, the\nPaymentIntent will return to the requires_confirmation state after those actions\nare completed. Your server needs to then explicitly re-confirm the PaymentIntent\nto initiate the next payment attempt. Read the expanded documentation\n[/docs/payments/payment-intents/web-manual]to learn more about manual\nconfirmation.",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}/confirm",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntentsIntentConfirm.in.json",
                "out": "./lib/schemas/PostPaymentIntentsIntentConfirm.out.json"
            }
        },
        "PostPaymentMethodsPaymentMethodDetach": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentMethodsPaymentMethodDetach",
            "description": "Detaches a PaymentMethod object from a Customer. After a PaymentMethod is\ndetached, it can no longer be used for a payment or re-attached to a Customer.",
            "callParams": {
                "pathName": "/v1/payment_methods/{payment_method}/detach",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentMethodsPaymentMethodDetach.in.json",
                "out": "./lib/schemas/PostPaymentMethodsPaymentMethodDetach.out.json"
            }
        },
        "PostPaymentMethodsPaymentMethodAttach": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentMethodsPaymentMethodAttach",
            "description": "Attaches a PaymentMethod object to a Customer.\n\nTo attach a new PaymentMethod to a customer for future payments, we recommend\nyou use a SetupIntent [/docs/api/setup_intents]or a PaymentIntent with \nsetup_future_usage\n[/docs/api/payment_intents/create#create_payment_intent-setup_future_usage].\nThese approaches will perform any necessary steps to ensure that the\nPaymentMethod can be used in a future payment. Using the\n/v1/payment_methods/:id/attach endpoint does not ensure that future payments can\nbe made with the attached PaymentMethod. See Optimizing cards for future\npayments [/docs/payments/payment-intents#future-usage] for more information\nabout setting up future payments.\n\nTo use this PaymentMethod as the default for invoice or subscription payments,\nset invoice_settings.default_payment_method\n[/docs/api/customers/update#update_customer-invoice_settings-default_payment_method]\n, on the Customer to the PaymentMethod's ID.",
            "callParams": {
                "pathName": "/v1/payment_methods/{payment_method}/attach",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentMethodsPaymentMethodAttach.in.json",
                "out": "./lib/schemas/PostPaymentMethodsPaymentMethodAttach.out.json"
            }
        },
        "PostPayoutsPayout": {
            "main": "./lib/actions/action.js",
            "title": "PostPayoutsPayout",
            "description": "Updates the specified payout by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged. This request accepts only the\nmetadata as arguments.",
            "callParams": {
                "pathName": "/v1/payouts/{payout}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPayoutsPayout.in.json",
                "out": "./lib/schemas/PostPayoutsPayout.out.json"
            }
        },
        "PostPayoutsPayoutCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostPayoutsPayoutCancel",
            "description": "A previously created payout can be canceled if it has not yet been paid out.\nFunds will be refunded to your available balance. You may not cancel automatic\nStripe payouts.",
            "callParams": {
                "pathName": "/v1/payouts/{payout}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPayoutsPayoutCancel.in.json",
                "out": "./lib/schemas/PostPayoutsPayoutCancel.out.json"
            }
        },
        "PostPayouts": {
            "main": "./lib/actions/action.js",
            "title": "PostPayouts",
            "description": "To send funds to your own bank account, you create a new payout object. Your \nStripe balance must be able to cover the payout amount, or you'll receive an\n\"Insufficient Funds\" error.\n\nIf your API key is in test mode, money won't actually be sent, though everything\nelse will occur as if in live mode.\n\nIf you are creating a manual payout on a Stripe account that uses multiple\npayment source types, you'll need to specify the source type balance that the\npayout should draw from. The balance object details available and pending\namounts by source type.",
            "callParams": {
                "pathName": "/v1/payouts",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPayouts.in.json",
                "out": "./lib/schemas/PostPayouts.out.json"
            }
        },
        "PostPlans": {
            "main": "./lib/actions/action.js",
            "title": "PostPlans",
            "description": "You can now model subscriptions more flexibly using the Prices API. It replaces\nthe Plans API and is backwards compatible to simplify your migration.",
            "callParams": {
                "pathName": "/v1/plans",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPlans.in.json",
                "out": "./lib/schemas/PostPlans.out.json"
            }
        },
        "GetIssuingDisputesDispute": {
            "main": "./lib/actions/action.js",
            "title": "GetIssuingDisputesDispute",
            "description": "Retrieves an Issuing Dispute object.",
            "callParams": {
                "pathName": "/v1/issuing/disputes/{dispute}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingDisputesDispute.in.json",
                "out": "./lib/schemas/GetIssuingDisputesDispute.out.json"
            }
        },
        "GetPlansPlan": {
            "main": "./lib/actions/action.js",
            "title": "GetPlansPlan",
            "description": "Retrieves the plan with the given ID.",
            "callParams": {
                "pathName": "/v1/plans/{plan}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPlansPlan.in.json",
                "out": "./lib/schemas/GetPlansPlan.out.json"
            }
        },
        "PostPayoutsPayoutReverse": {
            "main": "./lib/actions/action.js",
            "title": "PostPayoutsPayoutReverse",
            "description": "Reverses a payout by debiting the destination bank account. Only payouts for\nconnected accounts to US bank accounts may be reversed at this time. If the\npayout is in the pending status, /v1/payouts/:id/cancel should be used instead.\n\nBy requesting a reversal via /v1/payouts/:id/reverse, you confirm that the\nauthorized signatory of the selected bank account has authorized the debit on\nthe bank account and that no other authorization is required.",
            "callParams": {
                "pathName": "/v1/payouts/{payout}/reverse",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPayoutsPayoutReverse.in.json",
                "out": "./lib/schemas/PostPayoutsPayoutReverse.out.json"
            }
        },
        "PostPaymentIntentsIntent": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentIntentsIntent",
            "description": "Updates properties on a PaymentIntent object without confirming.\n\nDepending on which properties you update, you may need to confirm the\nPaymentIntent again. For example, updating the payment_method will always\nrequire you to confirm the PaymentIntent again. If you prefer to update and\nconfirm at the same time, we recommend updating properties via the confirm API\n[/docs/api/payment_intents/confirm] instead.",
            "callParams": {
                "pathName": "/v1/payment_intents/{intent}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentIntentsIntent.in.json",
                "out": "./lib/schemas/PostPaymentIntentsIntent.out.json"
            }
        },
        "PostPlansPlan": {
            "main": "./lib/actions/action.js",
            "title": "PostPlansPlan",
            "description": "Updates the specified plan by setting the values of the parameters passed. Any\nparameters not provided are left unchanged. By design, you cannot change a\nplan's ID, amount, currency, or billing cycle.",
            "callParams": {
                "pathName": "/v1/plans/{plan}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPlansPlan.in.json",
                "out": "./lib/schemas/PostPlansPlan.out.json"
            }
        },
        "GetPricesPrice": {
            "main": "./lib/actions/action.js",
            "title": "GetPricesPrice",
            "description": "Retrieves the price with the given ID.",
            "callParams": {
                "pathName": "/v1/prices/{price}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPricesPrice.in.json",
                "out": "./lib/schemas/GetPricesPrice.out.json"
            }
        },
        "PostPricesPrice": {
            "main": "./lib/actions/action.js",
            "title": "PostPricesPrice",
            "description": "Updates the specified price by setting the values of the parameters passed. Any\nparameters not provided are left unchanged.",
            "callParams": {
                "pathName": "/v1/prices/{price}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPricesPrice.in.json",
                "out": "./lib/schemas/PostPricesPrice.out.json"
            }
        },
        "PostFileLinksLink": {
            "main": "./lib/actions/action.js",
            "title": "PostFileLinksLink",
            "description": "Updates an existing file link object. Expired links can no longer be updated.",
            "callParams": {
                "pathName": "/v1/file_links/{link}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostFileLinksLink.in.json",
                "out": "./lib/schemas/PostFileLinksLink.out.json"
            }
        },
        "PostProducts": {
            "main": "./lib/actions/action.js",
            "title": "PostProducts",
            "description": "Creates a new product object.",
            "callParams": {
                "pathName": "/v1/products",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostProducts.in.json",
                "out": "./lib/schemas/PostProducts.out.json"
            }
        },
        "DeleteProductsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteProductsId",
            "description": "Delete a product. Deleting a product is only possible if it has no prices\nassociated with it. Additionally, deleting a product with type=good is only\npossible if it has no SKUs associated with it.",
            "callParams": {
                "pathName": "/v1/products/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteProductsId.in.json",
                "out": "./lib/schemas/DeleteProductsId.out.json"
            }
        },
        "GetProductsId": {
            "main": "./lib/actions/action.js",
            "title": "GetProductsId",
            "description": "Retrieves the details of an existing product. Supply the unique product ID from\neither a product creation request or the product list, and Stripe will return\nthe corresponding product information.",
            "callParams": {
                "pathName": "/v1/products/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetProductsId.in.json",
                "out": "./lib/schemas/GetProductsId.out.json"
            }
        },
        "GetIssuingAuthorizationsAuthorization": {
            "main": "./lib/actions/action.js",
            "title": "GetIssuingAuthorizationsAuthorization",
            "description": "Retrieves an Issuing Authorization object.",
            "callParams": {
                "pathName": "/v1/issuing/authorizations/{authorization}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetIssuingAuthorizationsAuthorization.in.json",
                "out": "./lib/schemas/GetIssuingAuthorizationsAuthorization.out.json"
            }
        },
        "GetPayoutsPayout": {
            "main": "./lib/actions/action.js",
            "title": "GetPayoutsPayout",
            "description": "Retrieves the details of an existing payout. Supply the unique payout ID from\neither a payout creation request or the payout list, and Stripe will return the\ncorresponding payout information.",
            "callParams": {
                "pathName": "/v1/payouts/{payout}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPayoutsPayout.in.json",
                "out": "./lib/schemas/GetPayoutsPayout.out.json"
            }
        },
        "GetQuotesQuote": {
            "main": "./lib/actions/action.js",
            "title": "GetQuotesQuote",
            "description": "Retrieves the quote with the given ID.",
            "callParams": {
                "pathName": "/v1/quotes/{quote}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetQuotesQuote.in.json",
                "out": "./lib/schemas/GetQuotesQuote.out.json"
            }
        },
        "PostPromotionCodes": {
            "main": "./lib/actions/action.js",
            "title": "PostPromotionCodes",
            "description": "A promotion code points to a coupon. You can optionally restrict the code to a\nspecific customer, redemption limit, and expiration date.",
            "callParams": {
                "pathName": "/v1/promotion_codes",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPromotionCodes.in.json",
                "out": "./lib/schemas/PostPromotionCodes.out.json"
            }
        },
        "PostQuotes": {
            "main": "./lib/actions/action.js",
            "title": "PostQuotes",
            "description": "A quote models prices and services for a customer. Default options for header, \ndescription, footer, and expires_at can be set in the dashboard via the quote\ntemplate [https://dashboard.stripe.com/settings/billing/quote].",
            "callParams": {
                "pathName": "/v1/quotes",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostQuotes.in.json",
                "out": "./lib/schemas/PostQuotes.out.json"
            }
        },
        "PostQuotesQuoteCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostQuotesQuoteCancel",
            "description": "Cancels the quote.",
            "callParams": {
                "pathName": "/v1/quotes/{quote}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostQuotesQuoteCancel.in.json",
                "out": "./lib/schemas/PostQuotesQuoteCancel.out.json"
            }
        },
        "PostQuotesQuoteFinalize": {
            "main": "./lib/actions/action.js",
            "title": "PostQuotesQuoteFinalize",
            "description": "Finalizes the quote.",
            "callParams": {
                "pathName": "/v1/quotes/{quote}/finalize",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostQuotesQuoteFinalize.in.json",
                "out": "./lib/schemas/PostQuotesQuoteFinalize.out.json"
            }
        },
        "PostPromotionCodesPromotionCode": {
            "main": "./lib/actions/action.js",
            "title": "PostPromotionCodesPromotionCode",
            "description": "Updates the specified promotion code by setting the values of the parameters\npassed. Most fields are, by design, not editable.",
            "callParams": {
                "pathName": "/v1/promotion_codes/{promotion_code}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPromotionCodesPromotionCode.in.json",
                "out": "./lib/schemas/PostPromotionCodesPromotionCode.out.json"
            }
        },
        "PostQuotesQuoteAccept": {
            "main": "./lib/actions/action.js",
            "title": "PostQuotesQuoteAccept",
            "description": "Accepts the specified quote.",
            "callParams": {
                "pathName": "/v1/quotes/{quote}/accept",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostQuotesQuoteAccept.in.json",
                "out": "./lib/schemas/PostQuotesQuoteAccept.out.json"
            }
        },
        "PostRadarValueListItems": {
            "main": "./lib/actions/action.js",
            "title": "PostRadarValueListItems",
            "description": "Creates a new ValueListItem object, which is added to the specified parent value\nlist.",
            "callParams": {
                "pathName": "/v1/radar/value_list_items",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRadarValueListItems.in.json",
                "out": "./lib/schemas/PostRadarValueListItems.out.json"
            }
        },
        "PostQuotesQuote": {
            "main": "./lib/actions/action.js",
            "title": "PostQuotesQuote",
            "description": "A quote models prices and services for a customer.",
            "callParams": {
                "pathName": "/v1/quotes/{quote}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostQuotesQuote.in.json",
                "out": "./lib/schemas/PostQuotesQuote.out.json"
            }
        },
        "DeletePlansPlan": {
            "main": "./lib/actions/action.js",
            "title": "DeletePlansPlan",
            "description": "Deleting plans means new subscribers can't be added. Existing subscribers aren't\naffected.",
            "callParams": {
                "pathName": "/v1/plans/{plan}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeletePlansPlan.in.json",
                "out": "./lib/schemas/DeletePlansPlan.out.json"
            }
        },
        "GetRadarEarlyFraudWarningsEarlyFraudWarning": {
            "main": "./lib/actions/action.js",
            "title": "GetRadarEarlyFraudWarningsEarlyFraudWarning",
            "description": "Retrieves the details of an early fraud warning that has previously been\ncreated. \n\nPlease refer to the early fraud warning object reference for more details.",
            "callParams": {
                "pathName": "/v1/radar/early_fraud_warnings/{early_fraud_warning}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRadarEarlyFraudWarningsEarlyFraudWarning.in.json",
                "out": "./lib/schemas/GetRadarEarlyFraudWarningsEarlyFraudWarning.out.json"
            }
        },
        "DeleteRadarValueListItemsItem": {
            "main": "./lib/actions/action.js",
            "title": "DeleteRadarValueListItemsItem",
            "description": "Deletes a ValueListItem object, removing it from its parent value list.",
            "callParams": {
                "pathName": "/v1/radar/value_list_items/{item}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRadarValueListItemsItem.in.json",
                "out": "./lib/schemas/DeleteRadarValueListItemsItem.out.json"
            }
        },
        "PostPaymentLinksPaymentLink": {
            "main": "./lib/actions/action.js",
            "title": "PostPaymentLinksPaymentLink",
            "description": "Updates a payment link.",
            "callParams": {
                "pathName": "/v1/payment_links/{payment_link}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPaymentLinksPaymentLink.in.json",
                "out": "./lib/schemas/PostPaymentLinksPaymentLink.out.json"
            }
        },
        "GetRadarValueListItemsItem": {
            "main": "./lib/actions/action.js",
            "title": "GetRadarValueListItemsItem",
            "description": "Retrieves a ValueListItem object.",
            "callParams": {
                "pathName": "/v1/radar/value_list_items/{item}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRadarValueListItemsItem.in.json",
                "out": "./lib/schemas/GetRadarValueListItemsItem.out.json"
            }
        },
        "PostRadarValueListsValueList": {
            "main": "./lib/actions/action.js",
            "title": "PostRadarValueListsValueList",
            "description": "Updates a ValueList object by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged. Note that item_type is\nimmutable.",
            "callParams": {
                "pathName": "/v1/radar/value_lists/{value_list}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRadarValueListsValueList.in.json",
                "out": "./lib/schemas/PostRadarValueListsValueList.out.json"
            }
        },
        "PostRadarValueLists": {
            "main": "./lib/actions/action.js",
            "title": "PostRadarValueLists",
            "description": "Creates a new ValueList object, which can then be referenced in rules.",
            "callParams": {
                "pathName": "/v1/radar/value_lists",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRadarValueLists.in.json",
                "out": "./lib/schemas/PostRadarValueLists.out.json"
            }
        },
        "GetRecipientsId": {
            "main": "./lib/actions/action.js",
            "title": "GetRecipientsId",
            "description": "Retrieves the details of an existing recipient. You need only supply the unique\nrecipient identifier that was returned upon recipient creation.",
            "callParams": {
                "pathName": "/v1/recipients/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRecipientsId.in.json",
                "out": "./lib/schemas/GetRecipientsId.out.json"
            }
        },
        "PostRecipients": {
            "main": "./lib/actions/action.js",
            "title": "PostRecipients",
            "description": "Creates a new Recipient object and verifies the recipient's identity. Also\nverifies the recipient's bank account information or debit card, if either is\nprovided.",
            "callParams": {
                "pathName": "/v1/recipients",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRecipients.in.json",
                "out": "./lib/schemas/PostRecipients.out.json"
            }
        },
        "GetRefundsRefund": {
            "main": "./lib/actions/action.js",
            "title": "GetRefundsRefund",
            "description": "Retrieves the details of an existing refund.",
            "callParams": {
                "pathName": "/v1/refunds/{refund}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRefundsRefund.in.json",
                "out": "./lib/schemas/GetRefundsRefund.out.json"
            }
        },
        "PostRefundsRefund": {
            "main": "./lib/actions/action.js",
            "title": "PostRefundsRefund",
            "description": "Updates the specified refund by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument.",
            "callParams": {
                "pathName": "/v1/refunds/{refund}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRefundsRefund.in.json",
                "out": "./lib/schemas/PostRefundsRefund.out.json"
            }
        },
        "PostRefunds": {
            "main": "./lib/actions/action.js",
            "title": "PostRefunds",
            "description": "Create a refund.",
            "callParams": {
                "pathName": "/v1/refunds",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRefunds.in.json",
                "out": "./lib/schemas/PostRefunds.out.json"
            }
        },
        "PostRecipientsId": {
            "main": "./lib/actions/action.js",
            "title": "PostRecipientsId",
            "description": "Updates the specified recipient by setting the values of the parameters passed.\nAny parameters not provided will be left unchanged.\n\nIf you update the name or tax ID, the identity verification will automatically\nbe rerun. If you update the bank account, the bank account validation will\nautomatically be rerun.",
            "callParams": {
                "pathName": "/v1/recipients/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRecipientsId.in.json",
                "out": "./lib/schemas/PostRecipientsId.out.json"
            }
        },
        "PostRefundsRefundCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostRefundsRefundCancel",
            "description": "Cancels a refund with a status of requires_action.\n\nRefunds in other states cannot be canceled, and only refunds for payment methods\nthat require customer action will enter the requires_action state.",
            "callParams": {
                "pathName": "/v1/refunds/{refund}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostRefundsRefundCancel.in.json",
                "out": "./lib/schemas/PostRefundsRefundCancel.out.json"
            }
        },
        "GetReportingReportRunsReportRun": {
            "main": "./lib/actions/action.js",
            "title": "GetReportingReportRunsReportRun",
            "description": "Retrieves the details of an existing Report Run.",
            "callParams": {
                "pathName": "/v1/reporting/report_runs/{report_run}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetReportingReportRunsReportRun.in.json",
                "out": "./lib/schemas/GetReportingReportRunsReportRun.out.json"
            }
        },
        "PostReportingReportRuns": {
            "main": "./lib/actions/action.js",
            "title": "PostReportingReportRuns",
            "description": "Creates a new object and begin running the report. (Certain report types require\na live-mode API key [https://stripe.com/docs/keys#test-live-modes].)",
            "callParams": {
                "pathName": "/v1/reporting/report_runs",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostReportingReportRuns.in.json",
                "out": "./lib/schemas/PostReportingReportRuns.out.json"
            }
        },
        "GetReportingReportTypesReportType": {
            "main": "./lib/actions/action.js",
            "title": "GetReportingReportTypesReportType",
            "description": "Retrieves the details of a Report Type. (Certain report types require a \nlive-mode API key [https://stripe.com/docs/keys#test-live-modes].)",
            "callParams": {
                "pathName": "/v1/reporting/report_types/{report_type}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetReportingReportTypesReportType.in.json",
                "out": "./lib/schemas/GetReportingReportTypesReportType.out.json"
            }
        },
        "GetPromotionCodesPromotionCode": {
            "main": "./lib/actions/action.js",
            "title": "GetPromotionCodesPromotionCode",
            "description": "Retrieves the promotion code with the given ID. In order to retrieve a promotion\ncode by the customer-facing code use list [/docs/api/promotion_codes/list] with\nthe desired code.",
            "callParams": {
                "pathName": "/v1/promotion_codes/{promotion_code}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetPromotionCodesPromotionCode.in.json",
                "out": "./lib/schemas/GetPromotionCodesPromotionCode.out.json"
            }
        },
        "PostReviewsReviewApprove": {
            "main": "./lib/actions/action.js",
            "title": "PostReviewsReviewApprove",
            "description": "Approves a Review object, closing it and removing it from the list of reviews.",
            "callParams": {
                "pathName": "/v1/reviews/{review}/approve",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostReviewsReviewApprove.in.json",
                "out": "./lib/schemas/PostReviewsReviewApprove.out.json"
            }
        },
        "GetReviewsReview": {
            "main": "./lib/actions/action.js",
            "title": "GetReviewsReview",
            "description": "Retrieves a Review object.",
            "callParams": {
                "pathName": "/v1/reviews/{review}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetReviewsReview.in.json",
                "out": "./lib/schemas/GetReviewsReview.out.json"
            }
        },
        "PostSetupIntentsIntentConfirm": {
            "main": "./lib/actions/action.js",
            "title": "PostSetupIntentsIntentConfirm",
            "description": "Confirm that your customer intends to set up the current or provided payment\nmethod. For example, you would confirm a SetupIntent when a customer hits the\n\"Save\" button on a payment method management page on your website.\n\nIf the selected payment method does not require any additional steps from the\ncustomer, the SetupIntent will transition to thesucceeded status.\n\nOtherwise, it will transition to the requires_action status and suggest\nadditional actions via next_action. If setup fails, the SetupIntent will\ntransition to therequires_payment_method status.",
            "callParams": {
                "pathName": "/v1/setup_intents/{intent}/confirm",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSetupIntentsIntentConfirm.in.json",
                "out": "./lib/schemas/PostSetupIntentsIntentConfirm.out.json"
            }
        },
        "GetSetupIntentsIntent": {
            "main": "./lib/actions/action.js",
            "title": "GetSetupIntentsIntent",
            "description": "Retrieves the details of a SetupIntent that has previously been created. \n\nClient-side retrieval using a publishable key is allowed when the client_secret \nis provided in the query string. \n\nWhen retrieved with a publishable key, only a subset of properties will be\nreturned. Please refer to the SetupIntent object reference for more details.",
            "callParams": {
                "pathName": "/v1/setup_intents/{intent}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSetupIntentsIntent.in.json",
                "out": "./lib/schemas/GetSetupIntentsIntent.out.json"
            }
        },
        "GetShippingRatesShippingRateToken": {
            "main": "./lib/actions/action.js",
            "title": "GetShippingRatesShippingRateToken",
            "description": "Returns the shipping rate object with the given ID.",
            "callParams": {
                "pathName": "/v1/shipping_rates/{shipping_rate_token}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetShippingRatesShippingRateToken.in.json",
                "out": "./lib/schemas/GetShippingRatesShippingRateToken.out.json"
            }
        },
        "PostSetupIntentsIntentCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostSetupIntentsIntentCancel",
            "description": "A SetupIntent object can be canceled when it is in one of these statuses: \nrequires_payment_method, requires_confirmation, or requires_action. \n\nOnce canceled, setup is abandoned and any operations on the SetupIntent will\nfail with an error.",
            "callParams": {
                "pathName": "/v1/setup_intents/{intent}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSetupIntentsIntentCancel.in.json",
                "out": "./lib/schemas/PostSetupIntentsIntentCancel.out.json"
            }
        },
        "PostSetupIntentsIntentVerifyMicrodeposits": {
            "main": "./lib/actions/action.js",
            "title": "PostSetupIntentsIntentVerifyMicrodeposits",
            "description": "Verifies microdeposits on a SetupIntent object.",
            "callParams": {
                "pathName": "/v1/setup_intents/{intent}/verify_microdeposits",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSetupIntentsIntentVerifyMicrodeposits.in.json",
                "out": "./lib/schemas/PostSetupIntentsIntentVerifyMicrodeposits.out.json"
            }
        },
        "GetSigmaScheduledQueryRunsScheduledQueryRun": {
            "main": "./lib/actions/action.js",
            "title": "GetSigmaScheduledQueryRunsScheduledQueryRun",
            "description": "Retrieves the details of an scheduled query run.",
            "callParams": {
                "pathName": "/v1/sigma/scheduled_query_runs/{scheduled_query_run}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSigmaScheduledQueryRunsScheduledQueryRun.in.json",
                "out": "./lib/schemas/GetSigmaScheduledQueryRunsScheduledQueryRun.out.json"
            }
        },
        "GetSkusId": {
            "main": "./lib/actions/action.js",
            "title": "GetSkusId",
            "description": "Retrieves the details of an existing SKU. Supply the unique SKU identifier from\neither a SKU creation request or from the product, and Stripe will return the\ncorresponding SKU information.",
            "callParams": {
                "pathName": "/v1/skus/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSkusId.in.json",
                "out": "./lib/schemas/GetSkusId.out.json"
            }
        },
        "PostShippingRates": {
            "main": "./lib/actions/action.js",
            "title": "PostShippingRates",
            "description": "Creates a new shipping rate object.",
            "callParams": {
                "pathName": "/v1/shipping_rates",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostShippingRates.in.json",
                "out": "./lib/schemas/PostShippingRates.out.json"
            }
        },
        "PostSkusId": {
            "main": "./lib/actions/action.js",
            "title": "PostSkusId",
            "description": "Updates the specific SKU by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.\n\nNote that a SKU's attributes are not editable. Instead, you would need to\ndeactivate the existing SKU and create a new one with the new attribute values.",
            "callParams": {
                "pathName": "/v1/skus/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSkusId.in.json",
                "out": "./lib/schemas/PostSkusId.out.json"
            }
        },
        "GetRadarValueListsValueList": {
            "main": "./lib/actions/action.js",
            "title": "GetRadarValueListsValueList",
            "description": "Retrieves a ValueList object.",
            "callParams": {
                "pathName": "/v1/radar/value_lists/{value_list}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetRadarValueListsValueList.in.json",
                "out": "./lib/schemas/GetRadarValueListsValueList.out.json"
            }
        },
        "DeleteSkusId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteSkusId",
            "description": "Delete a SKU. Deleting a SKU is only possible until it has been used in an\norder.",
            "callParams": {
                "pathName": "/v1/skus/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSkusId.in.json",
                "out": "./lib/schemas/DeleteSkusId.out.json"
            }
        },
        "PostShippingRatesShippingRateToken": {
            "main": "./lib/actions/action.js",
            "title": "PostShippingRatesShippingRateToken",
            "description": "Updates an existing shipping rate object.",
            "callParams": {
                "pathName": "/v1/shipping_rates/{shipping_rate_token}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostShippingRatesShippingRateToken.in.json",
                "out": "./lib/schemas/PostShippingRatesShippingRateToken.out.json"
            }
        },
        "DeleteRadarValueListsValueList": {
            "main": "./lib/actions/action.js",
            "title": "DeleteRadarValueListsValueList",
            "description": "Deletes a ValueList object, also deleting any items contained within the value\nlist. To be deleted, a value list must not be referenced in any rules.",
            "callParams": {
                "pathName": "/v1/radar/value_lists/{value_list}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRadarValueListsValueList.in.json",
                "out": "./lib/schemas/DeleteRadarValueListsValueList.out.json"
            }
        },
        "PostSources": {
            "main": "./lib/actions/action.js",
            "title": "PostSources",
            "description": "Creates a new source object.",
            "callParams": {
                "pathName": "/v1/sources",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSources.in.json",
                "out": "./lib/schemas/PostSources.out.json"
            }
        },
        "GetSourcesSourceMandateNotificationsMandateNotification": {
            "main": "./lib/actions/action.js",
            "title": "GetSourcesSourceMandateNotificationsMandateNotification",
            "description": "Retrieves a new Source MandateNotification.",
            "callParams": {
                "pathName": "/v1/sources/{source}/mandate_notifications/{mandate_notification}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSourcesSourceMandateNotificationsMandateNotification.in.json",
                "out": "./lib/schemas/GetSourcesSourceMandateNotificationsMandateNotification.out.json"
            }
        },
        "PostSourcesSource": {
            "main": "./lib/actions/action.js",
            "title": "PostSourcesSource",
            "description": "Updates the specified source by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.\n\nThis request accepts the metadata and owner as arguments. It is also possible to\nupdate type specific information for selected payment methods. Please refer to\nour payment method guides [/docs/sources] for more detail.",
            "callParams": {
                "pathName": "/v1/sources/{source}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSourcesSource.in.json",
                "out": "./lib/schemas/PostSourcesSource.out.json"
            }
        },
        "PostSkus": {
            "main": "./lib/actions/action.js",
            "title": "PostSkus",
            "description": "Creates a new SKU associated with a product.",
            "callParams": {
                "pathName": "/v1/skus",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSkus.in.json",
                "out": "./lib/schemas/PostSkus.out.json"
            }
        },
        "PostSubscriptionItems": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionItems",
            "description": "Adds a new item to an existing subscription. No existing items will be changed\nor replaced.",
            "callParams": {
                "pathName": "/v1/subscription_items",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionItems.in.json",
                "out": "./lib/schemas/PostSubscriptionItems.out.json"
            }
        },
        "PostSourcesSourceVerify": {
            "main": "./lib/actions/action.js",
            "title": "PostSourcesSourceVerify",
            "description": "Verify a given source.",
            "callParams": {
                "pathName": "/v1/sources/{source}/verify",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSourcesSourceVerify.in.json",
                "out": "./lib/schemas/PostSourcesSourceVerify.out.json"
            }
        },
        "GetSubscriptionItemsItem": {
            "main": "./lib/actions/action.js",
            "title": "GetSubscriptionItemsItem",
            "description": "Retrieves the subscription item with the given ID.",
            "callParams": {
                "pathName": "/v1/subscription_items/{item}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptionItemsItem.in.json",
                "out": "./lib/schemas/GetSubscriptionItemsItem.out.json"
            }
        },
        "PostSetupIntents": {
            "main": "./lib/actions/action.js",
            "title": "PostSetupIntents",
            "description": "Creates a SetupIntent object.\n\nAfter the SetupIntent is created, attach a payment method and confirm\n[/docs/api/setup_intents/confirm]to collect any required permissions to charge\nthe payment method later.",
            "callParams": {
                "pathName": "/v1/setup_intents",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSetupIntents.in.json",
                "out": "./lib/schemas/PostSetupIntents.out.json"
            }
        },
        "GetSourcesSourceSourceTransactionsSourceTransaction": {
            "main": "./lib/actions/action.js",
            "title": "GetSourcesSourceSourceTransactionsSourceTransaction",
            "description": "Retrieve an existing source transaction object. Supply the unique source ID from\na source creation request and the source transaction ID and Stripe will return\nthe corresponding up-to-date source object information.",
            "callParams": {
                "pathName": "/v1/sources/{source}/source_transactions/{source_transaction}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSourcesSourceSourceTransactionsSourceTransaction.in.json",
                "out": "./lib/schemas/GetSourcesSourceSourceTransactionsSourceTransaction.out.json"
            }
        },
        "GetSourcesSource": {
            "main": "./lib/actions/action.js",
            "title": "GetSourcesSource",
            "description": "Retrieves an existing source object. Supply the unique source ID from a source\ncreation request and Stripe will return the corresponding up-to-date source\nobject information.",
            "callParams": {
                "pathName": "/v1/sources/{source}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSourcesSource.in.json",
                "out": "./lib/schemas/GetSourcesSource.out.json"
            }
        },
        "DeleteSubscriptionItemsItem": {
            "main": "./lib/actions/action.js",
            "title": "DeleteSubscriptionItemsItem",
            "description": "Deletes an item from the subscription. Removing a subscription item from a\nsubscription will not cancel the subscription.",
            "callParams": {
                "pathName": "/v1/subscription_items/{item}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSubscriptionItemsItem.in.json",
                "out": "./lib/schemas/DeleteSubscriptionItemsItem.out.json"
            }
        },
        "PostSubscriptionItemsSubscriptionItemUsageRecords": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionItemsSubscriptionItemUsageRecords",
            "description": "Creates a usage record for a specified subscription item and date, and fills it\nwith a quantity.\n\nUsage records provide quantity information that Stripe uses to track how much a\ncustomer is using your service. With usage information and the pricing model set\nup by the metered billing\n[https://stripe.com/docs/billing/subscriptions/metered-billing] plan, Stripe\nhelps you send accurate invoices to your customers.\n\nThe default calculation for usage is to add up all the quantity values of the\nusage records within a billing period. You can change this default behavior with\nthe billing plan's aggregate_usage parameter\n[/docs/api/plans/create#create_plan-aggregate_usage]. When there is more than\none usage record with the same timestamp, Stripe adds the quantity values\ntogether. In most cases, this is the desired resolution, however, you can change\nthis behavior with the action parameter.\n\nThe default pricing model for metered billing is per-unit pricing\n[/docs/api/plans/object#plan_object-billing_scheme]. For finer granularity, you\ncan configure metered billing to have a tiered pricing\n[https://stripe.com/docs/billing/subscriptions/tiers] model.",
            "callParams": {
                "pathName": "/v1/subscription_items/{subscription_item}/usage_records",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionItemsSubscriptionItemUsageRecords.in.json",
                "out": "./lib/schemas/PostSubscriptionItemsSubscriptionItemUsageRecords.out.json"
            }
        },
        "GetSubscriptionSchedulesSchedule": {
            "main": "./lib/actions/action.js",
            "title": "GetSubscriptionSchedulesSchedule",
            "description": "Retrieves the details of an existing subscription schedule. You only need to\nsupply the unique subscription schedule identifier that was returned upon\nsubscription schedule creation.",
            "callParams": {
                "pathName": "/v1/subscription_schedules/{schedule}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptionSchedulesSchedule.in.json",
                "out": "./lib/schemas/GetSubscriptionSchedulesSchedule.out.json"
            }
        },
        "DeleteRecipientsId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteRecipientsId",
            "description": "Permanently deletes a recipient. It cannot be undone.",
            "callParams": {
                "pathName": "/v1/recipients/{id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRecipientsId.in.json",
                "out": "./lib/schemas/DeleteRecipientsId.out.json"
            }
        },
        "PostSetupIntentsIntent": {
            "main": "./lib/actions/action.js",
            "title": "PostSetupIntentsIntent",
            "description": "Updates a SetupIntent object.",
            "callParams": {
                "pathName": "/v1/setup_intents/{intent}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSetupIntentsIntent.in.json",
                "out": "./lib/schemas/PostSetupIntentsIntent.out.json"
            }
        },
        "PostSubscriptionSchedulesScheduleCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionSchedulesScheduleCancel",
            "description": "Cancels a subscription schedule and its associated subscription immediately (if\nthe subscription schedule has an active subscription). A subscription schedule\ncan only be canceled if its status is not_started or active.",
            "callParams": {
                "pathName": "/v1/subscription_schedules/{schedule}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionSchedulesScheduleCancel.in.json",
                "out": "./lib/schemas/PostSubscriptionSchedulesScheduleCancel.out.json"
            }
        },
        "PostSubscriptionItemsItem": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionItemsItem",
            "description": "Updates the plan or quantity of an item on a current subscription.",
            "callParams": {
                "pathName": "/v1/subscription_items/{item}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionItemsItem.in.json",
                "out": "./lib/schemas/PostSubscriptionItemsItem.out.json"
            }
        },
        "PostSubscriptions": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptions",
            "description": "Creates a new subscription on an existing customer. Each customer can have up to\n500 active or scheduled subscriptions.\n\nWhen you create a subscription with collection_method=charge_automatically, the\nfirst invoice is finalized as part of the request. The payment_behavior \nparameter determines the exact behavior of the initial payment.\n\nTo start subscriptions where the first invoice always begins in a draft status,\nuse subscription schedules\n[/docs/billing/subscriptions/subscription-schedules#managing] instead. Schedules\nprovide the flexibility to model more complex billing configurations that change\nover time.",
            "callParams": {
                "pathName": "/v1/subscriptions",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptions.in.json",
                "out": "./lib/schemas/PostSubscriptions.out.json"
            }
        },
        "PostSubscriptionSchedulesSchedule": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionSchedulesSchedule",
            "description": "Updates an existing subscription schedule.",
            "callParams": {
                "pathName": "/v1/subscription_schedules/{schedule}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionSchedulesSchedule.in.json",
                "out": "./lib/schemas/PostSubscriptionSchedulesSchedule.out.json"
            }
        },
        "DeleteSubscriptionsSubscriptionExposedId": {
            "main": "./lib/actions/action.js",
            "title": "DeleteSubscriptionsSubscriptionExposedId",
            "description": "Cancels a customer's subscription immediately. The customer will not be charged\nagain for the subscription.\n\nNote, however, that any pending invoice items that you've created will still be\ncharged for at the end of the period, unless manually deleted. If you've set the\nsubscription to cancel at the end of the period, any pending prorations will\nalso be left in place and collected at the end of the period. But if the\nsubscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic\ncollection of all finalized invoices for the customer. This is intended to\nprevent unexpected payment attempts after the customer has canceled a\nsubscription. However, you can resume automatic collection of the invoices\nmanually after subscription cancellation to have us proceed. Or, you could check\nfor unpaid invoices before allowing the customer to cancel the subscription at\nall.",
            "callParams": {
                "pathName": "/v1/subscriptions/{subscription_exposed_id}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSubscriptionsSubscriptionExposedId.in.json",
                "out": "./lib/schemas/DeleteSubscriptionsSubscriptionExposedId.out.json"
            }
        },
        "DeleteSubscriptionsSubscriptionExposedIdDiscount": {
            "main": "./lib/actions/action.js",
            "title": "DeleteSubscriptionsSubscriptionExposedIdDiscount",
            "description": "Removes the currently applied discount on a subscription.",
            "callParams": {
                "pathName": "/v1/subscriptions/{subscription_exposed_id}/discount",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSubscriptionsSubscriptionExposedIdDiscount.in.json",
                "out": "./lib/schemas/DeleteSubscriptionsSubscriptionExposedIdDiscount.out.json"
            }
        },
        "PostSubscriptionSchedulesScheduleRelease": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionSchedulesScheduleRelease",
            "description": "Releases the subscription schedule immediately, which will stop scheduling of\nits phases, but leave any existing subscription in place. A schedule can only be\nreleased if its status is not_started or active. If the subscription schedule is\ncurrently associated with a subscription, releasing it will remove its \nsubscription property and set the subscription's ID to the released_subscription \nproperty.",
            "callParams": {
                "pathName": "/v1/subscription_schedules/{schedule}/release",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionSchedulesScheduleRelease.in.json",
                "out": "./lib/schemas/PostSubscriptionSchedulesScheduleRelease.out.json"
            }
        },
        "PostSubscriptionsSubscriptionExposedId": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionsSubscriptionExposedId",
            "description": "Updates an existing subscription on a customer to match the specified\nparameters. When changing plans or quantities, we will optionally prorate the\nprice we charge next month to make up for any price changes. To preview how the\nproration will be calculated, use the upcoming invoice endpoint.",
            "callParams": {
                "pathName": "/v1/subscriptions/{subscription_exposed_id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionsSubscriptionExposedId.in.json",
                "out": "./lib/schemas/PostSubscriptionsSubscriptionExposedId.out.json"
            }
        },
        "GetSubscriptionsSubscriptionExposedId": {
            "main": "./lib/actions/action.js",
            "title": "GetSubscriptionsSubscriptionExposedId",
            "description": "Retrieves the subscription with the given ID.",
            "callParams": {
                "pathName": "/v1/subscriptions/{subscription_exposed_id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetSubscriptionsSubscriptionExposedId.in.json",
                "out": "./lib/schemas/GetSubscriptionsSubscriptionExposedId.out.json"
            }
        },
        "GetTaxCodesId": {
            "main": "./lib/actions/action.js",
            "title": "GetTaxCodesId",
            "description": "Retrieves the details of an existing tax code. Supply the unique tax code ID and\nStripe will return the corresponding tax code information.",
            "callParams": {
                "pathName": "/v1/tax_codes/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTaxCodesId.in.json",
                "out": "./lib/schemas/GetTaxCodesId.out.json"
            }
        },
        "PostTaxRatesTaxRate": {
            "main": "./lib/actions/action.js",
            "title": "PostTaxRatesTaxRate",
            "description": "Updates an existing tax rate.",
            "callParams": {
                "pathName": "/v1/tax_rates/{tax_rate}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTaxRatesTaxRate.in.json",
                "out": "./lib/schemas/PostTaxRatesTaxRate.out.json"
            }
        },
        "PostTerminalConfigurations": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalConfigurations",
            "description": "Creates a new Configuration object.",
            "callParams": {
                "pathName": "/v1/terminal/configurations",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalConfigurations.in.json",
                "out": "./lib/schemas/PostTerminalConfigurations.out.json"
            }
        },
        "DeleteTerminalConfigurationsConfiguration": {
            "main": "./lib/actions/action.js",
            "title": "DeleteTerminalConfigurationsConfiguration",
            "description": "Deletes a Configuration object.",
            "callParams": {
                "pathName": "/v1/terminal/configurations/{configuration}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteTerminalConfigurationsConfiguration.in.json",
                "out": "./lib/schemas/DeleteTerminalConfigurationsConfiguration.out.json"
            }
        },
        "PostTaxRates": {
            "main": "./lib/actions/action.js",
            "title": "PostTaxRates",
            "description": "Creates a new tax rate.",
            "callParams": {
                "pathName": "/v1/tax_rates",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTaxRates.in.json",
                "out": "./lib/schemas/PostTaxRates.out.json"
            }
        },
        "PostSubscriptionSchedules": {
            "main": "./lib/actions/action.js",
            "title": "PostSubscriptionSchedules",
            "description": "Creates a new subscription schedule object. Each customer can have up to 500\nactive or scheduled subscriptions.",
            "callParams": {
                "pathName": "/v1/subscription_schedules",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostSubscriptionSchedules.in.json",
                "out": "./lib/schemas/PostSubscriptionSchedules.out.json"
            }
        },
        "PostTerminalConnectionTokens": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalConnectionTokens",
            "description": "To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived\nconnection token from Stripe, proxied through your server. On your backend, add\nan endpoint that creates and returns a connection token.",
            "callParams": {
                "pathName": "/v1/terminal/connection_tokens",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalConnectionTokens.in.json",
                "out": "./lib/schemas/PostTerminalConnectionTokens.out.json"
            }
        },
        "GetTaxRatesTaxRate": {
            "main": "./lib/actions/action.js",
            "title": "GetTaxRatesTaxRate",
            "description": "Retrieves a tax rate with the given ID",
            "callParams": {
                "pathName": "/v1/tax_rates/{tax_rate}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTaxRatesTaxRate.in.json",
                "out": "./lib/schemas/GetTaxRatesTaxRate.out.json"
            }
        },
        "PostTerminalConfigurationsConfiguration": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalConfigurationsConfiguration",
            "description": "Updates a new Configuration object.",
            "callParams": {
                "pathName": "/v1/terminal/configurations/{configuration}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalConfigurationsConfiguration.in.json",
                "out": "./lib/schemas/PostTerminalConfigurationsConfiguration.out.json"
            }
        },
        "PostTerminalLocations": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalLocations",
            "description": "Creates a new Location object. For further details, including which address\nfields are required in each country, see the Manage locations\n[/docs/terminal/fleet/locations] guide.",
            "callParams": {
                "pathName": "/v1/terminal/locations",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalLocations.in.json",
                "out": "./lib/schemas/PostTerminalLocations.out.json"
            }
        },
        "PostTerminalLocationsLocation": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalLocationsLocation",
            "description": "Updates a Location object by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/terminal/locations/{location}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalLocationsLocation.in.json",
                "out": "./lib/schemas/PostTerminalLocationsLocation.out.json"
            }
        },
        "DeleteTerminalLocationsLocation": {
            "main": "./lib/actions/action.js",
            "title": "DeleteTerminalLocationsLocation",
            "description": "Deletes a Location object.",
            "callParams": {
                "pathName": "/v1/terminal/locations/{location}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteTerminalLocationsLocation.in.json",
                "out": "./lib/schemas/DeleteTerminalLocationsLocation.out.json"
            }
        },
        "GetTerminalLocationsLocation": {
            "main": "./lib/actions/action.js",
            "title": "GetTerminalLocationsLocation",
            "description": "Retrieves a Location object.",
            "callParams": {
                "pathName": "/v1/terminal/locations/{location}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTerminalLocationsLocation.in.json",
                "out": "./lib/schemas/GetTerminalLocationsLocation.out.json"
            }
        },
        "GetTerminalReadersReader": {
            "main": "./lib/actions/action.js",
            "title": "GetTerminalReadersReader",
            "description": "Retrieves a Reader object.",
            "callParams": {
                "pathName": "/v1/terminal/readers/{reader}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTerminalReadersReader.in.json",
                "out": "./lib/schemas/GetTerminalReadersReader.out.json"
            }
        },
        "PostTerminalReadersReader": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalReadersReader",
            "description": "Updates a Reader object by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/terminal/readers/{reader}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalReadersReader.in.json",
                "out": "./lib/schemas/PostTerminalReadersReader.out.json"
            }
        },
        "PostTerminalReaders": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalReaders",
            "description": "Creates a new Reader object.",
            "callParams": {
                "pathName": "/v1/terminal/readers",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalReaders.in.json",
                "out": "./lib/schemas/PostTerminalReaders.out.json"
            }
        },
        "PostTerminalReadersReaderCancelAction": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalReadersReaderCancelAction",
            "description": "Cancels the current reader action.",
            "callParams": {
                "pathName": "/v1/terminal/readers/{reader}/cancel_action",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalReadersReaderCancelAction.in.json",
                "out": "./lib/schemas/PostTerminalReadersReaderCancelAction.out.json"
            }
        },
        "DeleteTerminalReadersReader": {
            "main": "./lib/actions/action.js",
            "title": "DeleteTerminalReadersReader",
            "description": "Deletes a Reader object.",
            "callParams": {
                "pathName": "/v1/terminal/readers/{reader}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteTerminalReadersReader.in.json",
                "out": "./lib/schemas/DeleteTerminalReadersReader.out.json"
            }
        },
        "PostTestHelpersTerminalReadersReaderPresentPaymentMethod": {
            "main": "./lib/actions/action.js",
            "title": "PostTestHelpersTerminalReadersReaderPresentPaymentMethod",
            "description": "Presents a payment method on a simulated reader. Can be used to simulate\naccepting a payment, saving a card or refunding a transaction.",
            "callParams": {
                "pathName": "/v1/test_helpers/terminal/readers/{reader}/present_payment_method",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTestHelpersTerminalReadersReaderPresentPaymentMethod.in.json",
                "out": "./lib/schemas/PostTestHelpersTerminalReadersReaderPresentPaymentMethod.out.json"
            }
        },
        "GetTerminalConfigurationsConfiguration": {
            "main": "./lib/actions/action.js",
            "title": "GetTerminalConfigurationsConfiguration",
            "description": "Retrieves a Configuration object.",
            "callParams": {
                "pathName": "/v1/terminal/configurations/{configuration}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTerminalConfigurationsConfiguration.in.json",
                "out": "./lib/schemas/GetTerminalConfigurationsConfiguration.out.json"
            }
        },
        "PostTerminalReadersReaderProcessSetupIntent": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalReadersReaderProcessSetupIntent",
            "description": "Initiates a setup intent flow on a Reader.",
            "callParams": {
                "pathName": "/v1/terminal/readers/{reader}/process_setup_intent",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalReadersReaderProcessSetupIntent.in.json",
                "out": "./lib/schemas/PostTerminalReadersReaderProcessSetupIntent.out.json"
            }
        },
        "PostTerminalReadersReaderProcessPaymentIntent": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalReadersReaderProcessPaymentIntent",
            "description": "Initiates a payment flow on a Reader.",
            "callParams": {
                "pathName": "/v1/terminal/readers/{reader}/process_payment_intent",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalReadersReaderProcessPaymentIntent.in.json",
                "out": "./lib/schemas/PostTerminalReadersReaderProcessPaymentIntent.out.json"
            }
        },
        "PostPrices": {
            "main": "./lib/actions/action.js",
            "title": "PostPrices",
            "description": "Creates a new price for an existing product. The price can be recurring or\none-time.",
            "callParams": {
                "pathName": "/v1/prices",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostPrices.in.json",
                "out": "./lib/schemas/PostPrices.out.json"
            }
        },
        "GetTestHelpersTestClocksTestClock": {
            "main": "./lib/actions/action.js",
            "title": "GetTestHelpersTestClocksTestClock",
            "description": "Retrieves a test clock.",
            "callParams": {
                "pathName": "/v1/test_helpers/test_clocks/{test_clock}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTestHelpersTestClocksTestClock.in.json",
                "out": "./lib/schemas/GetTestHelpersTestClocksTestClock.out.json"
            }
        },
        "DeleteTestHelpersTestClocksTestClock": {
            "main": "./lib/actions/action.js",
            "title": "DeleteTestHelpersTestClocksTestClock",
            "description": "Deletes a test clock.",
            "callParams": {
                "pathName": "/v1/test_helpers/test_clocks/{test_clock}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteTestHelpersTestClocksTestClock.in.json",
                "out": "./lib/schemas/DeleteTestHelpersTestClocksTestClock.out.json"
            }
        },
        "PostTestHelpersTestClocksTestClockAdvance": {
            "main": "./lib/actions/action.js",
            "title": "PostTestHelpersTestClocksTestClockAdvance",
            "description": "Starts advancing a test clock to a specified time in the future. Advancement is\ndone when status changes to Ready.",
            "callParams": {
                "pathName": "/v1/test_helpers/test_clocks/{test_clock}/advance",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTestHelpersTestClocksTestClockAdvance.in.json",
                "out": "./lib/schemas/PostTestHelpersTestClocksTestClockAdvance.out.json"
            }
        },
        "PostTestHelpersRefundsRefundExpire": {
            "main": "./lib/actions/action.js",
            "title": "PostTestHelpersRefundsRefundExpire",
            "description": "Expire a refund with a status of requires_action.",
            "callParams": {
                "pathName": "/v1/test_helpers/refunds/{refund}/expire",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTestHelpersRefundsRefundExpire.in.json",
                "out": "./lib/schemas/PostTestHelpersRefundsRefundExpire.out.json"
            }
        },
        "PostTokens": {
            "main": "./lib/actions/action.js",
            "title": "PostTokens",
            "description": "Creates a single-use token that represents a bank account's details. This token\ncan be used with any API method in place of a bank account dictionary. This\ntoken can be used only once, by attaching it to a Custom account.",
            "callParams": {
                "pathName": "/v1/tokens",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTokens.in.json",
                "out": "./lib/schemas/PostTokens.out.json"
            }
        },
        "PostTopupsTopupCancel": {
            "main": "./lib/actions/action.js",
            "title": "PostTopupsTopupCancel",
            "description": "Cancels a top-up. Only pending top-ups can be canceled.",
            "callParams": {
                "pathName": "/v1/topups/{topup}/cancel",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTopupsTopupCancel.in.json",
                "out": "./lib/schemas/PostTopupsTopupCancel.out.json"
            }
        },
        "PostTopupsTopup": {
            "main": "./lib/actions/action.js",
            "title": "PostTopupsTopup",
            "description": "Updates the metadata of a top-up. Other top-up details are not editable by\ndesign.",
            "callParams": {
                "pathName": "/v1/topups/{topup}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTopupsTopup.in.json",
                "out": "./lib/schemas/PostTopupsTopup.out.json"
            }
        },
        "PostProductsId": {
            "main": "./lib/actions/action.js",
            "title": "PostProductsId",
            "description": "Updates the specific product by setting the values of the parameters passed. Any\nparameters not provided will be left unchanged.",
            "callParams": {
                "pathName": "/v1/products/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostProductsId.in.json",
                "out": "./lib/schemas/PostProductsId.out.json"
            }
        },
        "PostTransfersTransfer": {
            "main": "./lib/actions/action.js",
            "title": "PostTransfersTransfer",
            "description": "Updates the specified transfer by setting the values of the parameters passed.\nAny parameters not provided will be left unchanged.\n\nThis request accepts only metadata as an argument.",
            "callParams": {
                "pathName": "/v1/transfers/{transfer}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTransfersTransfer.in.json",
                "out": "./lib/schemas/PostTransfersTransfer.out.json"
            }
        },
        "PostTopups": {
            "main": "./lib/actions/action.js",
            "title": "PostTopups",
            "description": "Top up the balance of an account",
            "callParams": {
                "pathName": "/v1/topups",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTopups.in.json",
                "out": "./lib/schemas/PostTopups.out.json"
            }
        },
        "PostTransfers": {
            "main": "./lib/actions/action.js",
            "title": "PostTransfers",
            "description": "To send funds from your Stripe account to a connected account, you create a new\ntransfer object. Your Stripe balance must be able to cover the transfer amount,\nor you'll receive an \"Insufficient Funds\" error.",
            "callParams": {
                "pathName": "/v1/transfers",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTransfers.in.json",
                "out": "./lib/schemas/PostTransfers.out.json"
            }
        },
        "PostTerminalReadersReaderSetReaderDisplay": {
            "main": "./lib/actions/action.js",
            "title": "PostTerminalReadersReaderSetReaderDisplay",
            "description": "Sets reader display to show cart details.",
            "callParams": {
                "pathName": "/v1/terminal/readers/{reader}/set_reader_display",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTerminalReadersReaderSetReaderDisplay.in.json",
                "out": "./lib/schemas/PostTerminalReadersReaderSetReaderDisplay.out.json"
            }
        },
        "PostTransfersIdReversals": {
            "main": "./lib/actions/action.js",
            "title": "PostTransfersIdReversals",
            "description": "When you create a new reversal, you must specify a transfer to create it on.\n\nWhen reversing transfers, you can optionally reverse part of the transfer. You\ncan do so as many times as you wish until the entire transfer has been reversed.\n\nOnce entirely reversed, a transfer can't be reversed again. This method will\nreturn an error when called on an already-reversed transfer, or when trying to\nreverse more money than is left on a transfer.",
            "callParams": {
                "pathName": "/v1/transfers/{id}/reversals",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTransfersIdReversals.in.json",
                "out": "./lib/schemas/PostTransfersIdReversals.out.json"
            }
        },
        "DeleteWebhookEndpointsWebhookEndpoint": {
            "main": "./lib/actions/action.js",
            "title": "DeleteWebhookEndpointsWebhookEndpoint",
            "description": "You can also delete webhook endpoints via the webhook endpoint management\n[https://dashboard.stripe.com/account/webhooks] page of the Stripe dashboard.",
            "callParams": {
                "pathName": "/v1/webhook_endpoints/{webhook_endpoint}",
                "method": "delete",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/DeleteWebhookEndpointsWebhookEndpoint.in.json",
                "out": "./lib/schemas/DeleteWebhookEndpointsWebhookEndpoint.out.json"
            }
        },
        "GetTokensToken": {
            "main": "./lib/actions/action.js",
            "title": "GetTokensToken",
            "description": "Retrieves the token with the given ID.",
            "callParams": {
                "pathName": "/v1/tokens/{token}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTokensToken.in.json",
                "out": "./lib/schemas/GetTokensToken.out.json"
            }
        },
        "GetTopupsTopup": {
            "main": "./lib/actions/action.js",
            "title": "GetTopupsTopup",
            "description": "Retrieves the details of a top-up that has previously been created. Supply the\nunique top-up ID that was returned from your previous request, and Stripe will\nreturn the corresponding top-up information.",
            "callParams": {
                "pathName": "/v1/topups/{topup}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTopupsTopup.in.json",
                "out": "./lib/schemas/GetTopupsTopup.out.json"
            }
        },
        "PostTransfersTransferReversalsId": {
            "main": "./lib/actions/action.js",
            "title": "PostTransfersTransferReversalsId",
            "description": "Updates the specified reversal by setting the values of the parameters passed.\nAny parameters not provided will be left unchanged.\n\nThis request only accepts metadata and description as arguments.",
            "callParams": {
                "pathName": "/v1/transfers/{transfer}/reversals/{id}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTransfersTransferReversalsId.in.json",
                "out": "./lib/schemas/PostTransfersTransferReversalsId.out.json"
            }
        },
        "PostTestHelpersTestClocks": {
            "main": "./lib/actions/action.js",
            "title": "PostTestHelpersTestClocks",
            "description": "Creates a new test clock that can be attached to new customers and quotes.",
            "callParams": {
                "pathName": "/v1/test_helpers/test_clocks",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostTestHelpersTestClocks.in.json",
                "out": "./lib/schemas/PostTestHelpersTestClocks.out.json"
            }
        },
        "GetTransfersTransfer": {
            "main": "./lib/actions/action.js",
            "title": "GetTransfersTransfer",
            "description": "Retrieves the details of an existing transfer. Supply the unique transfer ID\nfrom either a transfer creation request or the transfer list, and Stripe will\nreturn the corresponding transfer information.",
            "callParams": {
                "pathName": "/v1/transfers/{transfer}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTransfersTransfer.in.json",
                "out": "./lib/schemas/GetTransfersTransfer.out.json"
            }
        },
        "PostWebhookEndpoints": {
            "main": "./lib/actions/action.js",
            "title": "PostWebhookEndpoints",
            "description": "A webhook endpoint must have a url and a list of enabled_events. You may\noptionally specify the Boolean connect parameter. If set to true, then a Connect\nwebhook endpoint that notifies the specified url about events from all connected\naccounts is created; otherwise an account webhook endpoint that notifies the\nspecified url only about events from your account is created. You can also\ncreate webhook endpoints in the webhooks settings\n[https://dashboard.stripe.com/account/webhooks] section of the Dashboard.",
            "callParams": {
                "pathName": "/v1/webhook_endpoints",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostWebhookEndpoints.in.json",
                "out": "./lib/schemas/PostWebhookEndpoints.out.json"
            }
        },
        "GetTransfersTransferReversalsId": {
            "main": "./lib/actions/action.js",
            "title": "GetTransfersTransferReversalsId",
            "description": "By default, you can see the 10 most recent reversals stored directly on the\ntransfer object, but you can also retrieve details about a specific reversal\nstored on the transfer.",
            "callParams": {
                "pathName": "/v1/transfers/{transfer}/reversals/{id}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetTransfersTransferReversalsId.in.json",
                "out": "./lib/schemas/GetTransfersTransferReversalsId.out.json"
            }
        },
        "GetWebhookEndpointsWebhookEndpoint": {
            "main": "./lib/actions/action.js",
            "title": "GetWebhookEndpointsWebhookEndpoint",
            "description": "Retrieves the webhook endpoint with the given ID.",
            "callParams": {
                "pathName": "/v1/webhook_endpoints/{webhook_endpoint}",
                "method": "get",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/GetWebhookEndpointsWebhookEndpoint.in.json",
                "out": "./lib/schemas/GetWebhookEndpointsWebhookEndpoint.out.json"
            }
        },
        "PostWebhookEndpointsWebhookEndpoint": {
            "main": "./lib/actions/action.js",
            "title": "PostWebhookEndpointsWebhookEndpoint",
            "description": "Updates the webhook endpoint. You may edit the url, the list of enabled_events,\nand the status of your endpoint.",
            "callParams": {
                "pathName": "/v1/webhook_endpoints/{webhook_endpoint}",
                "method": "post",
                "requestContentType": "application/x-www-form-urlencoded"
            },
            "metadata": {
                "in": "./lib/schemas/PostWebhookEndpointsWebhookEndpoint.in.json",
                "out": "./lib/schemas/PostWebhookEndpointsWebhookEndpoint.out.json"
            }
        }
    }
}